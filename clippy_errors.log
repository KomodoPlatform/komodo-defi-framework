warning: /Users/borngraced/Work/komodefi/mm2src/mm2_bin_lib/Cargo.toml: file `/Users/borngraced/Work/komodefi/mm2src/mm2_bin_lib/src/mm2_bin.rs` found to be present in multiple build targets:
  * `bin` target `mm2`
  * `bin` target `kdf`
warning: non-canonical implementation of `clone` on a `Copy` type
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:28:37
    |
28  |               fn clone(&self) -> Self {
    |  _____________________________________^
29  | |                 let mut result = Self::default();
30  | |                 result.copy_from_slice(&self.0);
31  | |                 result
32  | |             }
    | |_____________^ help: change this to: `{ *self }`
...
151 |   impl_hash!(H32, 4);
    |   ------------------ in this macro invocation
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_canonical_clone_impl
    = note: `#[warn(clippy::non_canonical_clone_impl)]` on by default
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: function cannot return without recursing
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:90:13
    |
90  | /             fn eq(&self, other: &Self) -> bool {
91  | |                 let self_ref: &[u8] = &self.0;
92  | |                 let other_ref: &[u8] = &other.0;
93  | |                 self_ref == other_ref
94  | |             }
    | |_____________^
...
151 |   impl_hash!(H32, 4);
    |   ------------------ in this macro invocation
    |
note: recursive call site
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:93:17
    |
93  |                 self_ref == other_ref
    |                 ^^^^^^^^^^^^^^^^^^^^^
...
151 | impl_hash!(H32, 4);
    | ------------------ in this macro invocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unconditional_recursion
    = note: `#[warn(clippy::unconditional_recursion)]` on by default
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: function cannot return without recursing
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:98:13
    |
98  | /             fn eq(&self, other: &&Self) -> bool {
99  | |                 let self_ref: &[u8] = &self.0;
100 | |                 let other_ref: &[u8] = &other.0;
101 | |                 self_ref == other_ref
102 | |             }
    | |_____________^
...
151 |   impl_hash!(H32, 4);
    |   ------------------ in this macro invocation
    |
note: recursive call site
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:101:17
    |
101 |                 self_ref == other_ref
    |                 ^^^^^^^^^^^^^^^^^^^^^
...
151 | impl_hash!(H32, 4);
    | ------------------ in this macro invocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unconditional_recursion
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: non-canonical implementation of `clone` on a `Copy` type
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:28:37
    |
28  |               fn clone(&self) -> Self {
    |  _____________________________________^
29  | |                 let mut result = Self::default();
30  | |                 result.copy_from_slice(&self.0);
31  | |                 result
32  | |             }
    | |_____________^ help: change this to: `{ *self }`
...
152 |   impl_hash!(H48, 6);
    |   ------------------ in this macro invocation
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_canonical_clone_impl
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: function cannot return without recursing
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:90:13
    |
90  | /             fn eq(&self, other: &Self) -> bool {
91  | |                 let self_ref: &[u8] = &self.0;
92  | |                 let other_ref: &[u8] = &other.0;
93  | |                 self_ref == other_ref
94  | |             }
    | |_____________^
...
152 |   impl_hash!(H48, 6);
    |   ------------------ in this macro invocation
    |
note: recursive call site
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:93:17
    |
93  |                 self_ref == other_ref
    |                 ^^^^^^^^^^^^^^^^^^^^^
...
152 | impl_hash!(H48, 6);
    | ------------------ in this macro invocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unconditional_recursion
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: function cannot return without recursing
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:98:13
    |
98  | /             fn eq(&self, other: &&Self) -> bool {
99  | |                 let self_ref: &[u8] = &self.0;
100 | |                 let other_ref: &[u8] = &other.0;
101 | |                 self_ref == other_ref
102 | |             }
    | |_____________^
...
152 |   impl_hash!(H48, 6);
    |   ------------------ in this macro invocation
    |
note: recursive call site
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:101:17
    |
101 |                 self_ref == other_ref
    |                 ^^^^^^^^^^^^^^^^^^^^^
...
152 | impl_hash!(H48, 6);
    | ------------------ in this macro invocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unconditional_recursion
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: non-canonical implementation of `clone` on a `Copy` type
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:28:37
    |
28  |               fn clone(&self) -> Self {
    |  _____________________________________^
29  | |                 let mut result = Self::default();
30  | |                 result.copy_from_slice(&self.0);
31  | |                 result
32  | |             }
    | |_____________^ help: change this to: `{ *self }`
...
153 |   impl_hash!(H64, 8);
    |   ------------------ in this macro invocation
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_canonical_clone_impl
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: function cannot return without recursing
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:90:13
    |
90  | /             fn eq(&self, other: &Self) -> bool {
91  | |                 let self_ref: &[u8] = &self.0;
92  | |                 let other_ref: &[u8] = &other.0;
93  | |                 self_ref == other_ref
94  | |             }
    | |_____________^
...
153 |   impl_hash!(H64, 8);
    |   ------------------ in this macro invocation
    |
note: recursive call site
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:93:17
    |
93  |                 self_ref == other_ref
    |                 ^^^^^^^^^^^^^^^^^^^^^
...
153 | impl_hash!(H64, 8);
    | ------------------ in this macro invocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unconditional_recursion
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: function cannot return without recursing
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:98:13
    |
98  | /             fn eq(&self, other: &&Self) -> bool {
99  | |                 let self_ref: &[u8] = &self.0;
100 | |                 let other_ref: &[u8] = &other.0;
101 | |                 self_ref == other_ref
102 | |             }
    | |_____________^
...
153 |   impl_hash!(H64, 8);
    |   ------------------ in this macro invocation
    |
note: recursive call site
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:101:17
    |
101 |                 self_ref == other_ref
    |                 ^^^^^^^^^^^^^^^^^^^^^
...
153 | impl_hash!(H64, 8);
    | ------------------ in this macro invocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unconditional_recursion
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: non-canonical implementation of `clone` on a `Copy` type
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:28:37
    |
28  |               fn clone(&self) -> Self {
    |  _____________________________________^
29  | |                 let mut result = Self::default();
30  | |                 result.copy_from_slice(&self.0);
31  | |                 result
32  | |             }
    | |_____________^ help: change this to: `{ *self }`
...
154 |   impl_hash!(H96, 12);
    |   ------------------- in this macro invocation
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_canonical_clone_impl
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: function cannot return without recursing
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:90:13
    |
90  | /             fn eq(&self, other: &Self) -> bool {
91  | |                 let self_ref: &[u8] = &self.0;
92  | |                 let other_ref: &[u8] = &other.0;
93  | |                 self_ref == other_ref
94  | |             }
    | |_____________^
...
154 |   impl_hash!(H96, 12);
    |   ------------------- in this macro invocation
    |
note: recursive call site
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:93:17
    |
93  |                 self_ref == other_ref
    |                 ^^^^^^^^^^^^^^^^^^^^^
...
154 | impl_hash!(H96, 12);
    | ------------------- in this macro invocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unconditional_recursion
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: function cannot return without recursing
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:98:13
    |
98  | /             fn eq(&self, other: &&Self) -> bool {
99  | |                 let self_ref: &[u8] = &self.0;
100 | |                 let other_ref: &[u8] = &other.0;
101 | |                 self_ref == other_ref
102 | |             }
    | |_____________^
...
154 |   impl_hash!(H96, 12);
    |   ------------------- in this macro invocation
    |
note: recursive call site
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:101:17
    |
101 |                 self_ref == other_ref
    |                 ^^^^^^^^^^^^^^^^^^^^^
...
154 | impl_hash!(H96, 12);
    | ------------------- in this macro invocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unconditional_recursion
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: non-canonical implementation of `clone` on a `Copy` type
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:28:37
    |
28  |               fn clone(&self) -> Self {
    |  _____________________________________^
29  | |                 let mut result = Self::default();
30  | |                 result.copy_from_slice(&self.0);
31  | |                 result
32  | |             }
    | |_____________^ help: change this to: `{ *self }`
...
155 |   impl_hash!(H128, 16);
    |   -------------------- in this macro invocation
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_canonical_clone_impl
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: function cannot return without recursing
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:90:13
    |
90  | /             fn eq(&self, other: &Self) -> bool {
91  | |                 let self_ref: &[u8] = &self.0;
92  | |                 let other_ref: &[u8] = &other.0;
93  | |                 self_ref == other_ref
94  | |             }
    | |_____________^
...
155 |   impl_hash!(H128, 16);
    |   -------------------- in this macro invocation
    |
note: recursive call site
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:93:17
    |
93  |                 self_ref == other_ref
    |                 ^^^^^^^^^^^^^^^^^^^^^
...
155 | impl_hash!(H128, 16);
    | -------------------- in this macro invocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unconditional_recursion
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: function cannot return without recursing
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:98:13
    |
98  | /             fn eq(&self, other: &&Self) -> bool {
99  | |                 let self_ref: &[u8] = &self.0;
100 | |                 let other_ref: &[u8] = &other.0;
101 | |                 self_ref == other_ref
102 | |             }
    | |_____________^
...
155 |   impl_hash!(H128, 16);
    |   -------------------- in this macro invocation
    |
note: recursive call site
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:101:17
    |
101 |                 self_ref == other_ref
    |                 ^^^^^^^^^^^^^^^^^^^^^
...
155 | impl_hash!(H128, 16);
    | -------------------- in this macro invocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unconditional_recursion
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: non-canonical implementation of `clone` on a `Copy` type
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:28:37
    |
28  |               fn clone(&self) -> Self {
    |  _____________________________________^
29  | |                 let mut result = Self::default();
30  | |                 result.copy_from_slice(&self.0);
31  | |                 result
32  | |             }
    | |_____________^ help: change this to: `{ *self }`
...
156 |   impl_hash!(H160, 20);
    |   -------------------- in this macro invocation
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_canonical_clone_impl
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: function cannot return without recursing
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:90:13
    |
90  | /             fn eq(&self, other: &Self) -> bool {
91  | |                 let self_ref: &[u8] = &self.0;
92  | |                 let other_ref: &[u8] = &other.0;
93  | |                 self_ref == other_ref
94  | |             }
    | |_____________^
...
156 |   impl_hash!(H160, 20);
    |   -------------------- in this macro invocation
    |
note: recursive call site
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:93:17
    |
93  |                 self_ref == other_ref
    |                 ^^^^^^^^^^^^^^^^^^^^^
...
156 | impl_hash!(H160, 20);
    | -------------------- in this macro invocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unconditional_recursion
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: function cannot return without recursing
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:98:13
    |
98  | /             fn eq(&self, other: &&Self) -> bool {
99  | |                 let self_ref: &[u8] = &self.0;
100 | |                 let other_ref: &[u8] = &other.0;
101 | |                 self_ref == other_ref
102 | |             }
    | |_____________^
...
156 |   impl_hash!(H160, 20);
    |   -------------------- in this macro invocation
    |
note: recursive call site
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:101:17
    |
101 |                 self_ref == other_ref
    |                 ^^^^^^^^^^^^^^^^^^^^^
...
156 | impl_hash!(H160, 20);
    | -------------------- in this macro invocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unconditional_recursion
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: non-canonical implementation of `clone` on a `Copy` type
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:28:37
    |
28  |               fn clone(&self) -> Self {
    |  _____________________________________^
29  | |                 let mut result = Self::default();
30  | |                 result.copy_from_slice(&self.0);
31  | |                 result
32  | |             }
    | |_____________^ help: change this to: `{ *self }`
...
157 |   impl_hash!(H256, 32);
    |   -------------------- in this macro invocation
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_canonical_clone_impl
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: function cannot return without recursing
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:90:13
    |
90  | /             fn eq(&self, other: &Self) -> bool {
91  | |                 let self_ref: &[u8] = &self.0;
92  | |                 let other_ref: &[u8] = &other.0;
93  | |                 self_ref == other_ref
94  | |             }
    | |_____________^
...
157 |   impl_hash!(H256, 32);
    |   -------------------- in this macro invocation
    |
note: recursive call site
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:93:17
    |
93  |                 self_ref == other_ref
    |                 ^^^^^^^^^^^^^^^^^^^^^
...
157 | impl_hash!(H256, 32);
    | -------------------- in this macro invocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unconditional_recursion
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: function cannot return without recursing
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:98:13
    |
98  | /             fn eq(&self, other: &&Self) -> bool {
99  | |                 let self_ref: &[u8] = &self.0;
100 | |                 let other_ref: &[u8] = &other.0;
101 | |                 self_ref == other_ref
102 | |             }
    | |_____________^
...
157 |   impl_hash!(H256, 32);
    |   -------------------- in this macro invocation
    |
note: recursive call site
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:101:17
    |
101 |                 self_ref == other_ref
    |                 ^^^^^^^^^^^^^^^^^^^^^
...
157 | impl_hash!(H256, 32);
    | -------------------- in this macro invocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unconditional_recursion
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: non-canonical implementation of `clone` on a `Copy` type
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:28:37
    |
28  |               fn clone(&self) -> Self {
    |  _____________________________________^
29  | |                 let mut result = Self::default();
30  | |                 result.copy_from_slice(&self.0);
31  | |                 result
32  | |             }
    | |_____________^ help: change this to: `{ *self }`
...
158 |   impl_hash!(H264, 33);
    |   -------------------- in this macro invocation
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_canonical_clone_impl
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: function cannot return without recursing
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:90:13
    |
90  | /             fn eq(&self, other: &Self) -> bool {
91  | |                 let self_ref: &[u8] = &self.0;
92  | |                 let other_ref: &[u8] = &other.0;
93  | |                 self_ref == other_ref
94  | |             }
    | |_____________^
...
158 |   impl_hash!(H264, 33);
    |   -------------------- in this macro invocation
    |
note: recursive call site
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:93:17
    |
93  |                 self_ref == other_ref
    |                 ^^^^^^^^^^^^^^^^^^^^^
...
158 | impl_hash!(H264, 33);
    | -------------------- in this macro invocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unconditional_recursion
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: function cannot return without recursing
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:98:13
    |
98  | /             fn eq(&self, other: &&Self) -> bool {
99  | |                 let self_ref: &[u8] = &self.0;
100 | |                 let other_ref: &[u8] = &other.0;
101 | |                 self_ref == other_ref
102 | |             }
    | |_____________^
...
158 |   impl_hash!(H264, 33);
    |   -------------------- in this macro invocation
    |
note: recursive call site
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:101:17
    |
101 |                 self_ref == other_ref
    |                 ^^^^^^^^^^^^^^^^^^^^^
...
158 | impl_hash!(H264, 33);
    | -------------------- in this macro invocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unconditional_recursion
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: non-canonical implementation of `clone` on a `Copy` type
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:28:37
    |
28  |               fn clone(&self) -> Self {
    |  _____________________________________^
29  | |                 let mut result = Self::default();
30  | |                 result.copy_from_slice(&self.0);
31  | |                 result
32  | |             }
    | |_____________^ help: change this to: `{ *self }`
...
159 |   impl_hash!(H512, 64);
    |   -------------------- in this macro invocation
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_canonical_clone_impl
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: function cannot return without recursing
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:90:13
    |
90  | /             fn eq(&self, other: &Self) -> bool {
91  | |                 let self_ref: &[u8] = &self.0;
92  | |                 let other_ref: &[u8] = &other.0;
93  | |                 self_ref == other_ref
94  | |             }
    | |_____________^
...
159 |   impl_hash!(H512, 64);
    |   -------------------- in this macro invocation
    |
note: recursive call site
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:93:17
    |
93  |                 self_ref == other_ref
    |                 ^^^^^^^^^^^^^^^^^^^^^
...
159 | impl_hash!(H512, 64);
    | -------------------- in this macro invocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unconditional_recursion
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: function cannot return without recursing
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:98:13
    |
98  | /             fn eq(&self, other: &&Self) -> bool {
99  | |                 let self_ref: &[u8] = &self.0;
100 | |                 let other_ref: &[u8] = &other.0;
101 | |                 self_ref == other_ref
102 | |             }
    | |_____________^
...
159 |   impl_hash!(H512, 64);
    |   -------------------- in this macro invocation
    |
note: recursive call site
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:101:17
    |
101 |                 self_ref == other_ref
    |                 ^^^^^^^^^^^^^^^^^^^^^
...
159 | impl_hash!(H512, 64);
    | -------------------- in this macro invocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unconditional_recursion
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: non-canonical implementation of `clone` on a `Copy` type
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:28:37
    |
28  |               fn clone(&self) -> Self {
    |  _____________________________________^
29  | |                 let mut result = Self::default();
30  | |                 result.copy_from_slice(&self.0);
31  | |                 result
32  | |             }
    | |_____________^ help: change this to: `{ *self }`
...
160 |   impl_hash!(H520, 65);
    |   -------------------- in this macro invocation
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_canonical_clone_impl
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: function cannot return without recursing
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:90:13
    |
90  | /             fn eq(&self, other: &Self) -> bool {
91  | |                 let self_ref: &[u8] = &self.0;
92  | |                 let other_ref: &[u8] = &other.0;
93  | |                 self_ref == other_ref
94  | |             }
    | |_____________^
...
160 |   impl_hash!(H520, 65);
    |   -------------------- in this macro invocation
    |
note: recursive call site
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:93:17
    |
93  |                 self_ref == other_ref
    |                 ^^^^^^^^^^^^^^^^^^^^^
...
160 | impl_hash!(H520, 65);
    | -------------------- in this macro invocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unconditional_recursion
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: function cannot return without recursing
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:98:13
    |
98  | /             fn eq(&self, other: &&Self) -> bool {
99  | |                 let self_ref: &[u8] = &self.0;
100 | |                 let other_ref: &[u8] = &other.0;
101 | |                 self_ref == other_ref
102 | |             }
    | |_____________^
...
160 |   impl_hash!(H520, 65);
    |   -------------------- in this macro invocation
    |
note: recursive call site
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:101:17
    |
101 |                 self_ref == other_ref
    |                 ^^^^^^^^^^^^^^^^^^^^^
...
160 | impl_hash!(H520, 65);
    | -------------------- in this macro invocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unconditional_recursion
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: non-canonical implementation of `clone` on a `Copy` type
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:28:37
    |
28  |               fn clone(&self) -> Self {
    |  _____________________________________^
29  | |                 let mut result = Self::default();
30  | |                 result.copy_from_slice(&self.0);
31  | |                 result
32  | |             }
    | |_____________^ help: change this to: `{ *self }`
...
161 |   impl_hash!(OutCipherText, 80);
    |   ----------------------------- in this macro invocation
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_canonical_clone_impl
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: function cannot return without recursing
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:90:13
    |
90  | /             fn eq(&self, other: &Self) -> bool {
91  | |                 let self_ref: &[u8] = &self.0;
92  | |                 let other_ref: &[u8] = &other.0;
93  | |                 self_ref == other_ref
94  | |             }
    | |_____________^
...
161 |   impl_hash!(OutCipherText, 80);
    |   ----------------------------- in this macro invocation
    |
note: recursive call site
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:93:17
    |
93  |                 self_ref == other_ref
    |                 ^^^^^^^^^^^^^^^^^^^^^
...
161 | impl_hash!(OutCipherText, 80);
    | ----------------------------- in this macro invocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unconditional_recursion
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: function cannot return without recursing
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:98:13
    |
98  | /             fn eq(&self, other: &&Self) -> bool {
99  | |                 let self_ref: &[u8] = &self.0;
100 | |                 let other_ref: &[u8] = &other.0;
101 | |                 self_ref == other_ref
102 | |             }
    | |_____________^
...
161 |   impl_hash!(OutCipherText, 80);
    |   ----------------------------- in this macro invocation
    |
note: recursive call site
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:101:17
    |
101 |                 self_ref == other_ref
    |                 ^^^^^^^^^^^^^^^^^^^^^
...
161 | impl_hash!(OutCipherText, 80);
    | ----------------------------- in this macro invocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unconditional_recursion
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: non-canonical implementation of `clone` on a `Copy` type
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:28:37
    |
28  |               fn clone(&self) -> Self {
    |  _____________________________________^
29  | |                 let mut result = Self::default();
30  | |                 result.copy_from_slice(&self.0);
31  | |                 result
32  | |             }
    | |_____________^ help: change this to: `{ *self }`
...
162 |   impl_hash!(ZkProofSapling, 192);
    |   ------------------------------- in this macro invocation
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_canonical_clone_impl
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: function cannot return without recursing
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:90:13
    |
90  | /             fn eq(&self, other: &Self) -> bool {
91  | |                 let self_ref: &[u8] = &self.0;
92  | |                 let other_ref: &[u8] = &other.0;
93  | |                 self_ref == other_ref
94  | |             }
    | |_____________^
...
162 |   impl_hash!(ZkProofSapling, 192);
    |   ------------------------------- in this macro invocation
    |
note: recursive call site
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:93:17
    |
93  |                 self_ref == other_ref
    |                 ^^^^^^^^^^^^^^^^^^^^^
...
162 | impl_hash!(ZkProofSapling, 192);
    | ------------------------------- in this macro invocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unconditional_recursion
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: function cannot return without recursing
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:98:13
    |
98  | /             fn eq(&self, other: &&Self) -> bool {
99  | |                 let self_ref: &[u8] = &self.0;
100 | |                 let other_ref: &[u8] = &other.0;
101 | |                 self_ref == other_ref
102 | |             }
    | |_____________^
...
162 |   impl_hash!(ZkProofSapling, 192);
    |   ------------------------------- in this macro invocation
    |
note: recursive call site
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:101:17
    |
101 |                 self_ref == other_ref
    |                 ^^^^^^^^^^^^^^^^^^^^^
...
162 | impl_hash!(ZkProofSapling, 192);
    | ------------------------------- in this macro invocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unconditional_recursion
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: non-canonical implementation of `clone` on a `Copy` type
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:28:37
    |
28  |               fn clone(&self) -> Self {
    |  _____________________________________^
29  | |                 let mut result = Self::default();
30  | |                 result.copy_from_slice(&self.0);
31  | |                 result
32  | |             }
    | |_____________^ help: change this to: `{ *self }`
...
163 |   impl_hash!(ZkProof, 296);
    |   ------------------------ in this macro invocation
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_canonical_clone_impl
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: function cannot return without recursing
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:90:13
    |
90  | /             fn eq(&self, other: &Self) -> bool {
91  | |                 let self_ref: &[u8] = &self.0;
92  | |                 let other_ref: &[u8] = &other.0;
93  | |                 self_ref == other_ref
94  | |             }
    | |_____________^
...
163 |   impl_hash!(ZkProof, 296);
    |   ------------------------ in this macro invocation
    |
note: recursive call site
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:93:17
    |
93  |                 self_ref == other_ref
    |                 ^^^^^^^^^^^^^^^^^^^^^
...
163 | impl_hash!(ZkProof, 296);
    | ------------------------ in this macro invocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unconditional_recursion
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: function cannot return without recursing
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:98:13
    |
98  | /             fn eq(&self, other: &&Self) -> bool {
99  | |                 let self_ref: &[u8] = &self.0;
100 | |                 let other_ref: &[u8] = &other.0;
101 | |                 self_ref == other_ref
102 | |             }
    | |_____________^
...
163 |   impl_hash!(ZkProof, 296);
    |   ------------------------ in this macro invocation
    |
note: recursive call site
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:101:17
    |
101 |                 self_ref == other_ref
    |                 ^^^^^^^^^^^^^^^^^^^^^
...
163 | impl_hash!(ZkProof, 296);
    | ------------------------ in this macro invocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unconditional_recursion
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: non-canonical implementation of `clone` on a `Copy` type
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:28:37
    |
28  |               fn clone(&self) -> Self {
    |  _____________________________________^
29  | |                 let mut result = Self::default();
30  | |                 result.copy_from_slice(&self.0);
31  | |                 result
32  | |             }
    | |_____________^ help: change this to: `{ *self }`
...
164 |   impl_hash!(EncCipherText, 580);
    |   ------------------------------ in this macro invocation
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_canonical_clone_impl
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: function cannot return without recursing
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:90:13
    |
90  | /             fn eq(&self, other: &Self) -> bool {
91  | |                 let self_ref: &[u8] = &self.0;
92  | |                 let other_ref: &[u8] = &other.0;
93  | |                 self_ref == other_ref
94  | |             }
    | |_____________^
...
164 |   impl_hash!(EncCipherText, 580);
    |   ------------------------------ in this macro invocation
    |
note: recursive call site
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:93:17
    |
93  |                 self_ref == other_ref
    |                 ^^^^^^^^^^^^^^^^^^^^^
...
164 | impl_hash!(EncCipherText, 580);
    | ------------------------------ in this macro invocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unconditional_recursion
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: function cannot return without recursing
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:98:13
    |
98  | /             fn eq(&self, other: &&Self) -> bool {
99  | |                 let self_ref: &[u8] = &self.0;
100 | |                 let other_ref: &[u8] = &other.0;
101 | |                 self_ref == other_ref
102 | |             }
    | |_____________^
...
164 |   impl_hash!(EncCipherText, 580);
    |   ------------------------------ in this macro invocation
    |
note: recursive call site
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:101:17
    |
101 |                 self_ref == other_ref
    |                 ^^^^^^^^^^^^^^^^^^^^^
...
164 | impl_hash!(EncCipherText, 580);
    | ------------------------------ in this macro invocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unconditional_recursion
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: non-canonical implementation of `clone` on a `Copy` type
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:28:37
    |
28  |               fn clone(&self) -> Self {
    |  _____________________________________^
29  | |                 let mut result = Self::default();
30  | |                 result.copy_from_slice(&self.0);
31  | |                 result
32  | |             }
    | |_____________^ help: change this to: `{ *self }`
...
165 |   impl_hash!(CipherText, 601);
    |   --------------------------- in this macro invocation
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_canonical_clone_impl
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: function cannot return without recursing
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:90:13
    |
90  | /             fn eq(&self, other: &Self) -> bool {
91  | |                 let self_ref: &[u8] = &self.0;
92  | |                 let other_ref: &[u8] = &other.0;
93  | |                 self_ref == other_ref
94  | |             }
    | |_____________^
...
165 |   impl_hash!(CipherText, 601);
    |   --------------------------- in this macro invocation
    |
note: recursive call site
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:93:17
    |
93  |                 self_ref == other_ref
    |                 ^^^^^^^^^^^^^^^^^^^^^
...
165 | impl_hash!(CipherText, 601);
    | --------------------------- in this macro invocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unconditional_recursion
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: function cannot return without recursing
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:98:13
    |
98  | /             fn eq(&self, other: &&Self) -> bool {
99  | |                 let self_ref: &[u8] = &self.0;
100 | |                 let other_ref: &[u8] = &other.0;
101 | |                 self_ref == other_ref
102 | |             }
    | |_____________^
...
165 |   impl_hash!(CipherText, 601);
    |   --------------------------- in this macro invocation
    |
note: recursive call site
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:101:17
    |
101 |                 self_ref == other_ref
    |                 ^^^^^^^^^^^^^^^^^^^^^
...
165 | impl_hash!(CipherText, 601);
    | --------------------------- in this macro invocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unconditional_recursion
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: non-canonical implementation of `clone` on a `Copy` type
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:28:37
    |
28  |               fn clone(&self) -> Self {
    |  _____________________________________^
29  | |                 let mut result = Self::default();
30  | |                 result.copy_from_slice(&self.0);
31  | |                 result
32  | |             }
    | |_____________^ help: change this to: `{ *self }`
...
166 |   impl_hash!(EquihashSolution, 1344);
    |   ---------------------------------- in this macro invocation
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_canonical_clone_impl
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: function cannot return without recursing
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:90:13
    |
90  | /             fn eq(&self, other: &Self) -> bool {
91  | |                 let self_ref: &[u8] = &self.0;
92  | |                 let other_ref: &[u8] = &other.0;
93  | |                 self_ref == other_ref
94  | |             }
    | |_____________^
...
166 |   impl_hash!(EquihashSolution, 1344);
    |   ---------------------------------- in this macro invocation
    |
note: recursive call site
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:93:17
    |
93  |                 self_ref == other_ref
    |                 ^^^^^^^^^^^^^^^^^^^^^
...
166 | impl_hash!(EquihashSolution, 1344);
    | ---------------------------------- in this macro invocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unconditional_recursion
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: function cannot return without recursing
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:98:13
    |
98  | /             fn eq(&self, other: &&Self) -> bool {
99  | |                 let self_ref: &[u8] = &self.0;
100 | |                 let other_ref: &[u8] = &other.0;
101 | |                 self_ref == other_ref
102 | |             }
    | |_____________^
...
166 |   impl_hash!(EquihashSolution, 1344);
    |   ---------------------------------- in this macro invocation
    |
note: recursive call site
   --> mm2src/mm2_bitcoin/primitives/src/hash.rs:101:17
    |
101 |                 self_ref == other_ref
    |                 ^^^^^^^^^^^^^^^^^^^^^
...
166 | impl_hash!(EquihashSolution, 1344);
    | ---------------------------------- in this macro invocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unconditional_recursion
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `primitives` (lib) generated 48 warnings
warning: cross-crate traits with a default impl, like `mm_error::NotMmError`, should not be specialized
   --> mm2src/mm2_err_handle/src/mm_error.rs:110:1
    |
110 | impl<T: ?Sized> NotMmError for Arc<T> {}
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = warning: this will change its meaning in a future release!
    = note: for more information, see issue #93367 <https://github.com/rust-lang/rust/issues/93367>
    = note: `std::alloc::Global` is not a generic parameter
note: try using the same sequence of generic parameters as the struct definition
   --> /Users/borngraced/.rustup/toolchains/nightly-2024-01-05-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/sync.rs:248:1
    |
248 | / pub struct Arc<
249 | |     T: ?Sized,
250 | |     #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator = Global,
251 | | > {
    | |_^
    = note: `#[warn(suspicious_auto_trait_impls)]` on by default

warning: cross-crate traits with a default impl, like `mm_error::NotEqual`, should not be specialized
   --> mm2src/mm2_err_handle/src/mm_error.rs:121:1
    |
121 | impl<T: ?Sized> NotEqual for Arc<T> {}
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = warning: this will change its meaning in a future release!
    = note: for more information, see issue #93367 <https://github.com/rust-lang/rust/issues/93367>
    = note: `std::alloc::Global` is not a generic parameter
note: try using the same sequence of generic parameters as the struct definition
   --> /Users/borngraced/.rustup/toolchains/nightly-2024-01-05-aarch64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/sync.rs:248:1
    |
248 | / pub struct Arc<
249 | |     T: ?Sized,
250 | |     #[unstable(feature = "allocator_api", issue = "32838")] A: Allocator = Global,
251 | | > {
    | |_^

warning: `mm2_err_handle` (lib) generated 2 warnings
warning: function cannot return without recursing
   --> mm2src/mm2_bitcoin/keys/src/public.rs:97:5
    |
97  | /     fn eq(&self, other: &Self) -> bool {
98  | |         let s_slice: &[u8] = self;
99  | |         let o_slice: &[u8] = other;
100 | |         s_slice == o_slice
101 | |     }
    | |_____^
    |
note: recursive call site
   --> mm2src/mm2_bitcoin/keys/src/public.rs:100:9
    |
100 |         s_slice == o_slice
    |         ^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unconditional_recursion
    = note: `#[warn(clippy::unconditional_recursion)]` on by default

warning: `keys` (lib) generated 1 warning
warning: this OR pattern can be rewritten using a range
  --> mm2src/mm2_bitcoin/script/src/sign.rs:85:21
   |
85 |         matches!(u, 1 | 2 | 3)
   |                     ^^^^^^^^^ help: try: `1..=3`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_patterns
   = note: `#[warn(clippy::manual_range_patterns)]` on by default

warning: `script` (lib) generated 1 warning (run `cargo clippy --fix --lib -p script` to apply 1 suggestion)
warning: function cannot return without recursing
   --> mm2src/mm2_bitcoin/rpc/src/v1/types/hash.rs:126:13
    |
126 | /             fn eq(&self, other: &Self) -> bool {
127 | |                 let self_ref: &[u8] = &self.0;
128 | |                 let other_ref: &[u8] = &other.0;
129 | |                 self_ref == other_ref
130 | |             }
    | |_____________^
...
216 |   impl_hash!(H264, GlobalH264, 33);
    |   -------------------------------- in this macro invocation
    |
note: recursive call site
   --> mm2src/mm2_bitcoin/rpc/src/v1/types/hash.rs:129:17
    |
129 |                 self_ref == other_ref
    |                 ^^^^^^^^^^^^^^^^^^^^^
...
216 | impl_hash!(H264, GlobalH264, 33);
    | -------------------------------- in this macro invocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unconditional_recursion
    = note: `#[warn(clippy::unconditional_recursion)]` on by default
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: non-canonical implementation of `partial_cmp` on an `Ord` type
   --> mm2src/mm2_bitcoin/rpc/src/v1/types/hash.rs:133:9
    |
133 | /          impl PartialOrd for $name {
134 | |              fn partial_cmp(&self, other: &Self) -> Option<Ordering> {
    | | _____________________________________________________________________-
135 | ||                 let self_ref: &[u8] = &self.0;
136 | ||                 let other_ref: &[u8] = &other.0;
137 | ||                 self_ref.partial_cmp(other_ref)
138 | ||             }
    | ||_____________- help: change this to: `{ Some(self.cmp(other)) }`
139 | |          }
    | |__________^
...
216 |    impl_hash!(H264, GlobalH264, 33);
    |    -------------------------------- in this macro invocation
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_canonical_partial_ord_impl
    = note: `#[warn(clippy::non_canonical_partial_ord_impl)]` on by default
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: function cannot return without recursing
   --> mm2src/mm2_bitcoin/rpc/src/v1/types/hash.rs:126:13
    |
126 | /             fn eq(&self, other: &Self) -> bool {
127 | |                 let self_ref: &[u8] = &self.0;
128 | |                 let other_ref: &[u8] = &other.0;
129 | |                 self_ref == other_ref
130 | |             }
    | |_____________^
...
217 |   impl_hash!(H256, GlobalH256, 32);
    |   -------------------------------- in this macro invocation
    |
note: recursive call site
   --> mm2src/mm2_bitcoin/rpc/src/v1/types/hash.rs:129:17
    |
129 |                 self_ref == other_ref
    |                 ^^^^^^^^^^^^^^^^^^^^^
...
217 | impl_hash!(H256, GlobalH256, 32);
    | -------------------------------- in this macro invocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unconditional_recursion
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: non-canonical implementation of `partial_cmp` on an `Ord` type
   --> mm2src/mm2_bitcoin/rpc/src/v1/types/hash.rs:133:9
    |
133 | /          impl PartialOrd for $name {
134 | |              fn partial_cmp(&self, other: &Self) -> Option<Ordering> {
    | | _____________________________________________________________________-
135 | ||                 let self_ref: &[u8] = &self.0;
136 | ||                 let other_ref: &[u8] = &other.0;
137 | ||                 self_ref.partial_cmp(other_ref)
138 | ||             }
    | ||_____________- help: change this to: `{ Some(self.cmp(other)) }`
139 | |          }
    | |__________^
...
217 |    impl_hash!(H256, GlobalH256, 32);
    |    -------------------------------- in this macro invocation
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_canonical_partial_ord_impl
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: function cannot return without recursing
   --> mm2src/mm2_bitcoin/rpc/src/v1/types/hash.rs:126:13
    |
126 | /             fn eq(&self, other: &Self) -> bool {
127 | |                 let self_ref: &[u8] = &self.0;
128 | |                 let other_ref: &[u8] = &other.0;
129 | |                 self_ref == other_ref
130 | |             }
    | |_____________^
...
218 |   impl_hash!(H160, GlobalH160, 20);
    |   -------------------------------- in this macro invocation
    |
note: recursive call site
   --> mm2src/mm2_bitcoin/rpc/src/v1/types/hash.rs:129:17
    |
129 |                 self_ref == other_ref
    |                 ^^^^^^^^^^^^^^^^^^^^^
...
218 | impl_hash!(H160, GlobalH160, 20);
    | -------------------------------- in this macro invocation
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unconditional_recursion
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: non-canonical implementation of `partial_cmp` on an `Ord` type
   --> mm2src/mm2_bitcoin/rpc/src/v1/types/hash.rs:133:9
    |
133 | /          impl PartialOrd for $name {
134 | |              fn partial_cmp(&self, other: &Self) -> Option<Ordering> {
    | | _____________________________________________________________________-
135 | ||                 let self_ref: &[u8] = &self.0;
136 | ||                 let other_ref: &[u8] = &other.0;
137 | ||                 self_ref.partial_cmp(other_ref)
138 | ||             }
    | ||_____________- help: change this to: `{ Some(self.cmp(other)) }`
139 | |          }
    | |__________^
...
218 |    impl_hash!(H160, GlobalH160, 20);
    |    -------------------------------- in this macro invocation
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#non_canonical_partial_ord_impl
    = note: this warning originates in the macro `impl_hash` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `rpc` (lib) generated 6 warnings
warning: use of `or_insert_with` to construct default value
   --> mm2src/mm2_metrics/src/mm_metrics.rs:195:10
    |
195 |         .or_insert_with(MetricNameValueMap::new)
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `or_default()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_or_default
    = note: `#[warn(clippy::unwrap_or_default)]` on by default

warning: `mm2_metrics` (lib) generated 1 warning (run `cargo clippy --fix --lib -p mm2_metrics` to apply 1 suggestion)
warning: unit tests in doctest are not executed
   --> mm2src/derives/enum_derives/src/lib.rs:108:5
    |
108 |   /// #[test]
    |  _____^
109 | | /// fn test_from_stringify() {
    | |__________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#test_attr_in_doctest
    = note: `#[warn(clippy::test_attr_in_doctest)]` on by default

warning: `enum_derives` (lib) generated 1 warning
warning: redundant guard
   --> mm2src/mm2_net/src/wasm/wasm_ws.rs:751:69
    |
751 |             Some((_conn_idx, WebSocketEvent::Closed { reason })) if reason == ClosureReason::NormalClosure => (),
    |                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_guards
    = note: `#[warn(clippy::redundant_guards)]` on by default
help: try
    |
751 -             Some((_conn_idx, WebSocketEvent::Closed { reason })) if reason == ClosureReason::NormalClosure => (),
751 +             Some((_conn_idx, WebSocketEvent::Closed { reason: ClosureReason::NormalClosure })) => (),
    |

warning: `mm2_net` (lib) generated 1 warning
warning: unneeded `return` statement with `?` operator
   --> mm2src/mm2_eth/src/eip712_encode.rs:147:9
    |
147 |         return Err(decode_error("Expected 0x-prefixed address (20 bytes)", field_name))?;
    |         ^^^^^^^ help: remove it
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return_with_question_mark
    = note: `#[warn(clippy::needless_return_with_question_mark)]` on by default

warning: `mm2_eth` (lib) generated 1 warning (run `cargo clippy --fix --lib -p mm2_eth` to apply 1 suggestion)
warning: writing `&Vec` instead of `&[_]` involves a new object where a slice will do
  --> mm2src/mm2_db/src/indexed_db/drivers/cursor/multi_key_bound_cursor.rs:31:22
   |
31 |         only_values: &Vec<(String, Json)>,
   |                      ^^^^^^^^^^^^^^^^^^^^ help: change this to: `&[(String, Json)]`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_arg
   = note: `#[warn(clippy::ptr_arg)]` on by default

warning: unnecessarily eager cloning of iterator items
   --> mm2src/mm2_db/src/indexed_db/indexed_cursor.rs:426:32
    |
426 |                    let expected = numbers
    |  _________________________________^
427 | |                      .iter()
    | | ____________________________-
428 | ||                     .cloned()
429 | ||                     .filter(|num| num_x <= num && num <= num_y)
    | ||_______________________________________________________________^
    |  |_______________________________________________________________|
    |                                                                  help: try: `.filter(|&num| num_x <= num && num <= num_y).cloned()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#iter_overeager_cloned
    = note: `#[warn(clippy::iter_overeager_cloned)]` on by default

warning: `mm2_db` (lib) generated 2 warnings (run `cargo clippy --fix --lib -p mm2_db` to apply 1 suggestion)
warning: unused import: `tendermint_rpc::query::Query as TendermintQuery`
  --> mm2src/coins/tendermint/rpc/tendermint_wasm_rpc.rs:17:9
   |
17 | pub use tendermint_rpc::query::Query as TendermintQuery;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: `&` without an explicit lifetime name cannot be used here
  --> mm2src/coins/utxo/utxo_block_header_storage/wasm/block_header_table.rs:13:36
   |
13 |     pub const TICKER_HEIGHT_INDEX: &str = "block_height_ticker_index";
   |                                    ^
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: for more information, see issue #115010 <https://github.com/rust-lang/rust/issues/115010>
   = note: `#[warn(elided_lifetimes_in_associated_constant)]` on by default
help: use the `'static` lifetime
   |
13 |     pub const TICKER_HEIGHT_INDEX: &'static str = "block_height_ticker_index";
   |                                     +++++++

warning: `&` without an explicit lifetime name cannot be used here
  --> mm2src/coins/utxo/utxo_block_header_storage/wasm/block_header_table.rs:14:34
   |
14 |     pub const HASH_TICKER_INDEX: &str = "block_hash_ticker_index";
   |                                  ^
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: for more information, see issue #115010 <https://github.com/rust-lang/rust/issues/115010>
help: use the `'static` lifetime
   |
14 |     pub const HASH_TICKER_INDEX: &'static str = "block_hash_ticker_index";
   |                                   +++++++

warning: unused imports: `AddressHashEnum`, `AddressScriptType`, `Public`, `Secret`
  --> mm2src/coins/utxo/utxo_builder/utxo_coin_builder.rs:23:77
   |
23 | ...sBuilder, AddressFormat as UtxoAddressFormat, AddressHashEnum, AddressScriptTy...
   |                                                  ^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^
24 | ...e, Public, Secret};
   |       ^^^^^^  ^^^^^^

warning: unused imports: `AddressHashEnum`, `AddressScriptType`, `Address`, `KeyPair`, `Private`, `Public`, `Secret`
  --> mm2src/coins/utxo/utxo_builder/utxo_conf_builder.rs:9:16
   |
9  | ...::{Address, AddressFormat as UtxoAddressFormat, AddressHashEnum, AddressScriptType, KeyPair, Priva...
   |       ^^^^^^^                                      ^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^  ^^^^^^^  ^^^^^^^
10 | ...   Public, Secret};
   |       ^^^^^^  ^^^^^^

warning: `&` without an explicit lifetime name cannot be used here
  --> mm2src/coins/z_coin/storage/walletdb/wasm/tables.rs:16:37
   |
16 |     pub const TICKER_ACCOUNT_INDEX: &str = "ticker_account_index";
   |                                     ^
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: for more information, see issue #115010 <https://github.com/rust-lang/rust/issues/115010>
help: use the `'static` lifetime
   |
16 |     pub const TICKER_ACCOUNT_INDEX: &'static str = "ticker_account_index";
   |                                      +++++++

warning: `&` without an explicit lifetime name cannot be used here
  --> mm2src/coins/z_coin/storage/walletdb/wasm/tables.rs:21:44
   |
21 |     pub const TICKER_ACCOUNT_EXTFVK_INDEX: &str = "ticker_account_extfvk_index";
   |                                            ^
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: for more information, see issue #115010 <https://github.com/rust-lang/rust/issues/115010>
help: use the `'static` lifetime
   |
21 |     pub const TICKER_ACCOUNT_EXTFVK_INDEX: &'static str = "ticker_account_extfvk_index";
   |                                             +++++++

warning: `&` without an explicit lifetime name cannot be used here
  --> mm2src/coins/z_coin/storage/z_params/indexeddb.rs:27:31
   |
27 |     const SPEND_OUTPUT_INDEX: &str = "sapling_spend_sapling_output_index";
   |                               ^
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
   = note: for more information, see issue #115010 <https://github.com/rust-lang/rust/issues/115010>
help: use the `'static` lifetime
   |
27 |     const SPEND_OUTPUT_INDEX: &'static str = "sapling_spend_sapling_output_index";
   |                                +++++++

warning: `&` without an explicit lifetime name cannot be used here
    --> mm2src/coins/lp_coins.rs:3798:26
     |
3798 |     const DEX_FEE_SHARE: &str = "0.75";
     |                          ^
     |
     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
     = note: for more information, see issue #115010 <https://github.com/rust-lang/rust/issues/115010>
help: use the `'static` lifetime
     |
3798 |     const DEX_FEE_SHARE: &'static str = "0.75";
     |                           +++++++

warning: the feature `local_key_cell_methods` has been stable since 1.73.0 and no longer requires an attribute to enable
  --> mm2src/coins/lp_coins.rs:35:12
   |
35 | #![feature(local_key_cell_methods)] // for tests
   |            ^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(stable_features)]` on by default

warning: use of `or_insert_with` to construct default value
   --> mm2src/coins/eth/eth_balance_events.rs:202:34
    |
202 | ...                   .or_insert_with(HashMap::new)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `or_default()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_or_default
    = note: `#[warn(clippy::unwrap_or_default)]` on by default

warning: writing `&Vec` instead of `&[_]` involves a new object where a slice will do
   --> mm2src/coins/eth/eth_swap_v2/mod.rs:205:34
    |
205 | ...ength(decoded: &Vec<Token>, expected_len: usize) -> Result<(), PrepareTxDat...
    |                   ^^^^^^^^^^^ help: change this to: `&[Token]`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_arg
    = note: `#[warn(clippy::ptr_arg)]` on by default

warning: explicit call to `.into_iter()` in function argument accepting `IntoIterator`
    --> mm2src/coins/eth.rs:5570:26
     |
5570 |                     .zip(web3_instances.into_iter())
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing the `.into_iter()`: `web3_instances`
     |
note: this parameter accepts any `IntoIterator`, so you don't need to call `.into_iter()`
    --> /Users/borngraced/.rustup/toolchains/nightly-2024-01-05-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs:643:12
     |
643  |         U: IntoIterator,
     |            ^^^^^^^^^^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion
     = note: `#[warn(clippy::useless_conversion)]` on by default

warning: use of a fallible conversion when an infallible one could be used
    --> mm2src/coins/eth.rs:6380:34
     |
6380 | ...= try_s!(EthPrivKeyBuildPolicy::try_from(priv_key_policy));
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `From::from`
     |
     = note: converting `PrivKeyBuildPolicy` to `EthPrivKeyBuildPolicy` cannot fail
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_fallible_conversions
     = note: `#[warn(clippy::unnecessary_fallible_conversions)]` on by default

warning: explicit call to `.into_iter()` in function argument accepting `IntoIterator`
    --> mm2src/coins/eth.rs:7093:25
     |
7093 |         balances.extend(token_balances.into_iter());
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing the `.into_iter()`: `token_balances`
     |
note: this parameter accepts any `IntoIterator`, so you don't need to call `.into_iter()`
    --> /Users/borngraced/.rustup/toolchains/nightly-2024-01-05-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/iter/traits/collect.rs:372:18
     |
372  |     fn extend<T: IntoIterator<Item = A>>(&mut self, iter: T);
     |                  ^^^^^^^^^^^^^^^^^^^^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion

warning: use of `or_insert_with` to construct default value
   --> mm2src/coins/qrc20/history.rs:561:65
    |
561 | ...x_hash).or_insert_with(HashMap::default);
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `or_default()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_or_default

warning: use of `or_insert_with` to construct default value
   --> mm2src/coins/utxo/bch.rs:115:34
    |
115 |         self.slp.entry(token_id).or_insert_with(Vec::new).push(slp_unspent);
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `or_default()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_or_default

warning: accessing first element with `tx
                     .outputs.get(0)`
   --> mm2src/coins/utxo/bch.rs:386:39
    |
386 |           let maybe_op_return: Script = tx
    |  _______________________________________^
387 | |             .outputs
388 | |             .get(0)
    | |___________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#get_first
    = note: `#[warn(clippy::get_first)]` on by default
help: try
    |
386 ~         let maybe_op_return: Script = tx
387 +             .outputs.first()
    |

warning: accessing first element with `receipt
                                 .log.get(0)`
   --> mm2src/coins/utxo/qtum_delegation.rs:185:21
    |
185 | /                     receipt
186 | |                         .log
187 | |                         .get(0)
    | |_______________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#get_first
help: try
    |
185 ~                     receipt
186 +                         .log.first()
    |

warning: called `unwrap` on `final_response` after checking its variant with `is_some`
   --> mm2src/coins/utxo/rpc_clients/electrum_rpc/client.rs:431:39
    |
430 |                         if !send_to_all && final_response.is_some() {
    |                                            ------------------------ the check is happening here
431 |                             return Ok(final_response.unwrap());
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try using `if let` or `match`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_unwrap
    = note: `#[warn(clippy::unnecessary_unwrap)]` on by default

warning: explicit call to `.into_iter()` in function argument accepting `IntoIterator`
   --> mm2src/coins/utxo/rpc_clients/electrum_rpc/client.rs:738:43
    |
738 |                         serialized.extend(headers.hex.0.into_iter());
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing the `.into_iter()`: `headers.hex.0`
    |
note: this parameter accepts any `IntoIterator`, so you don't need to call `.into_iter()`
   --> /Users/borngraced/.rustup/toolchains/nightly-2024-01-05-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/iter/traits/collect.rs:372:18
    |
372 |     fn extend<T: IntoIterator<Item = A>>(&mut self, iter: T);
    |                  ^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion

warning: explicit call to `.into_iter()` in function argument accepting `IntoIterator`
    --> mm2src/coins/utxo/rpc_clients/electrum_rpc/client.rs:1069:39
     |
1069 |                     serialized.extend(res.hex.0.into_iter());
     |                                       ^^^^^^^^^^^^^^^^^^^^^ help: consider removing the `.into_iter()`: `res.hex.0`
     |
note: this parameter accepts any `IntoIterator`, so you don't need to call `.into_iter()`
    --> /Users/borngraced/.rustup/toolchains/nightly-2024-01-05-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/iter/traits/collect.rs:372:18
     |
372  |     fn extend<T: IntoIterator<Item = A>>(&mut self, iter: T);
     |                  ^^^^^^^^^^^^^^^^^^^^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion

warning: usage of `bool::then` in `filter_map`
   --> mm2src/coins/utxo/rpc_clients/electrum_rpc/connection_manager/manager.rs:377:14
    |
377 |               .filter_map(|(_, conn_ctx)| {
    |  ______________^
378 | |                 (!maintained_connections.contains_key(&conn_ctx.id)).then(||...
379 | |             })
    | |______________^ help: use `filter` then `map` instead: `filter(|&(_, conn_ctx)| (!maintained_connections.contains_key(&conn_ctx.id))).map(|(_, conn_ctx)| (conn_ctx.connection.clone(), conn_ctx.id))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#filter_map_bool_then
    = note: `#[warn(clippy::filter_map_bool_then)]` on by default

warning: explicit call to `.into_iter()` in function argument accepting `IntoIterator`
    --> mm2src/coins/utxo/rpc_clients.rs:1031:41
     |
1031 |                 transaction_list.extend(transactions.into_iter());
     |                                         ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing the `.into_iter()`: `transactions`
     |
note: this parameter accepts any `IntoIterator`, so you don't need to call `.into_iter()`
    --> /Users/borngraced/.rustup/toolchains/nightly-2024-01-05-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/iter/traits/collect.rs:372:18
     |
372  |     fn extend<T: IntoIterator<Item = A>>(&mut self, iter: T);
     |                  ^^^^^^^^^^^^^^^^^^^^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion

warning: accessing first element with `args.funding_tx.outputs.get(0)`
    --> mm2src/coins/utxo/utxo_common.rs:5073:8
     |
5073 |     if args.funding_tx.outputs.get(0) != Some(&expected_output) {
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `args.funding_tx.outputs.first()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#get_first

warning: accessing first element with `args.funding_tx.outputs.get(0)`
    --> mm2src/coins/utxo/utxo_common.rs:5077:13
     |
5077 |             args.funding_tx.outputs.get(0)
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `args.funding_tx.outputs.first()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#get_first

warning: in a `match` scrutinee, avoid complex blocks or closures with blocks; instead, move the block or closure higher and bind it with a `let`
   --> mm2src/coins/utxo/utxo_tx_history_v2.rs:739:39
    |
739 |   ...   .inspect_err(move |e| {
    |  _____________________________^
740 | | ...       error!("Error {e:?} on balance fetching for the coin {}", ticker);
741 | | ...   })
    | |_______^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#blocks_in_conditions
    = note: `#[warn(clippy::blocks_in_conditions)]` on by default

warning: accessing first element with `nft_list.nfts.get(0)`
   --> mm2src/coins/nft/nft_tests.rs:219:15
    |
219 |     let nft = nft_list.nfts.get(0).unwrap();
    |               ^^^^^^^^^^^^^^^^^^^^ help: try: `nft_list.nfts.first()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#get_first

warning: accessing first element with `storage
                 .get_transfers_by_token_addr_id(chain, TOKEN_ADD.to_string(), token_id)
                 .await
                 .unwrap().get(0)`
   --> mm2src/coins/nft/nft_tests.rs:465:21
    |
465 |       let transfer1 = storage
    |  _____________________^
466 | |         .get_transfers_by_token_addr_id(chain, TOKEN_ADD.to_string(), token_id)
467 | |         .await
468 | |         .unwrap()
469 | |         .get(0)
    | |_______________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#get_first
help: try
    |
465 ~     let transfer1 = storage
466 +         .get_transfers_by_token_addr_id(chain, TOKEN_ADD.to_string(), token_id)
467 +         .await
468 +         .unwrap().first()
    |

warning: accessing first element with `transfer_history.transfer_history.get(0)`
   --> mm2src/coins/nft/nft_tests.rs:516:20
    |
516 |     let transfer = transfer_history.transfer_history.get(0).unwrap();
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `transfer_history.transfer_history.first()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#get_first

warning: accessing first element with `transfer_history.transfer_history.get(0)`
   --> mm2src/coins/nft/nft_tests.rs:562:20
    |
562 |     let transfer = transfer_history.transfer_history.get(0).unwrap();
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `transfer_history.transfer_history.first()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#get_first

warning: accessing first element with `transfer_history1.transfer_history.get(0)`
   --> mm2src/coins/nft/nft_tests.rs:570:21
    |
570 |     let transfer1 = transfer_history1.transfer_history.get(0).unwrap();
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `transfer_history1.transfer_history.first()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#get_first

warning: accessing first element with `transfer_history2.transfer_history.get(0)`
   --> mm2src/coins/nft/nft_tests.rs:578:22
    |
578 |     let transfer_0 = transfer_history2.transfer_history.get(0).unwrap();
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `transfer_history2.transfer_history.first()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#get_first

warning: accessing first element with `transfer_upd.get(0)`
   --> mm2src/coins/nft/nft_tests.rs:614:24
    |
614 |     let transfer_upd = transfer_upd.get(0).unwrap();
    |                        ^^^^^^^^^^^^^^^^^^^ help: try: `transfer_upd.first()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#get_first

warning: question mark operator is useless here
   --> mm2src/coins/z_coin/storage/walletdb/wasm/storage.rs:315:9
    |
315 | /         Ok(walletdb_blocks_table
316 | |             .replace_item_by_unique_multi_index(index_keys, &block)
317 | |             .await
318 | |             .map(|_| ())
319 | |             .map_mm_err()?)
    | |___________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_question_mark
    = note: `#[warn(clippy::needless_question_mark)]` on by default
help: try removing question mark and `Ok()`
    |
315 ~         walletdb_blocks_table
316 +             .replace_item_by_unique_multi_index(index_keys, &block)
317 +             .await
318 +             .map(|_| ())
319 +             .map_mm_err()
    |

warning: question mark operator is useless here
   --> mm2src/coins/z_coin/storage/walletdb/wasm/storage.rs:610:9
    |
610 |         Ok(witness_table.add_item(&witness).await.map(|_| ()).map_mm_err()?)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try removing question mark and `Ok()`: `witness_table.add_item(&witness).await.map(|_| ()).map_mm_err()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_question_mark

warning: question mark operator is useless here
   --> mm2src/coins/z_coin/storage/walletdb/wasm/storage.rs:781:9
    |
781 | /         Ok(sent_note_table
782 | |             .replace_item_by_unique_multi_index(index_keys, &new_note)
783 | |             .await
784 | |             .map(|_| ())
785 | |             .map_mm_err()?)
    | |___________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_question_mark
help: try removing question mark and `Ok()`
    |
781 ~         sent_note_table
782 +             .replace_item_by_unique_multi_index(index_keys, &new_note)
783 +             .await
784 +             .map(|_| ())
785 +             .map_mm_err()
    |

warning: unnecessary map of the identity function
    --> mm2src/coins/z_coin/storage/walletdb/wasm/storage.rs:1315:25
     |
1315 |               .into_iter()
     |  _________________________^
1316 | |             .map(|(i, item)| (i, item))
     | |_______________________________________^ help: remove the call to `map`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_identity
     = note: `#[warn(clippy::map_identity)]` on by default

warning: use of `or_insert_with` to construct default value
    --> mm2src/coins/lp_coins.rs:2567:52
     |
2567 | ...cker).or_insert_with(CoinBalance::default);
     |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `or_default()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_or_default

   Compiling mm2_bin_lib v2.4.0-beta (/Users/borngraced/Work/komodefi/mm2src/mm2_bin_lib)
warning: `coins` (lib) generated 39 warnings (run `cargo clippy --fix --lib -p coins` to apply 34 suggestions)
warning: unused imports: `InitL2ActivationOps`, `InitL2InitialStatus`, `InitL2TaskHandleShared`, `InitL2TaskManagerShared`, `InitL2Task`, `L2ProtocolParams`
 --> mm2src/coins_activation/src/l2/mod.rs:4:81
  |
4 | ...::{cancel_init_l2, init_l2, init_l2_status, init_l2_user_action, InitL2ActivationOps,
  |                                                                     ^^^^^^^^^^^^^^^^^^^
5 | ...   InitL2InitialStatus, InitL2Task, InitL2TaskHandleShared, InitL2TaskManagerShared, L2ProtocolParam...
  |       ^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `InitStandaloneCoinTask`
 --> mm2src/coins_activation/src/standalone_coin/mod.rs:7:65
  |
7 | ...                   InitStandaloneCoinStatusRequest, InitStandaloneCoinTask,
  |                                                        ^^^^^^^^^^^^^^^^^^^^^^

warning: usage of `Iterator::fold` on a type that implements `Try`
   --> mm2src/coins_activation/src/bch_with_tokens_activation.rs:166:14
    |
166 |               .fold(Some(BigDecimal::from(0)), |total, (_, addr_info)| {
    |  ______________^
167 | |                 total.and_then(|t| addr_info.balances.as_ref().map(|b| t + b...
168 | |             })
    | |______________^ help: use `try_fold` instead: `try_fold(BigDecimal::from(0), |total, (_, addr_info)| ...)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_try_fold
    = note: `#[warn(clippy::manual_try_fold)]` on by default

warning: usage of `Iterator::fold` on a type that implements `Try`
   --> mm2src/coins_activation/src/eth_with_token_activation.rs:236:18
    |
236 |                   .fold(Some(BigDecimal::from(0)), |total, (_, addr_info)| {
    |  __________________^
237 | |                     total.and_then(|t| addr_info.balances.as_ref().map(|b| t...
238 | |                 }),
    | |__________________^ help: use `try_fold` instead: `try_fold(BigDecimal::from(0), |total, (_, addr_info)| ...)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_try_fold

warning: `coins_activation` (lib) generated 4 warnings (run `cargo clippy --fix --lib -p coins_activation` to apply 2 suggestions)
    Checking mm2_main v0.1.0 (/Users/borngraced/Work/komodefi/mm2src/mm2_main)
warning: `enum_derives` (lib) generated 1 warning (1 duplicate)
error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_wallet::mnemonics_wasm_db::WalletsDBError>`
   --> mm2src/mm2_main/src/lp_wallet/mnemonics_wasm_db.rs:125:44
    |
125 |     let db = wallets_ctx.wallets_db().await?;
    |                                            ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_wallet::mnemonics_wasm_db::WalletsDBError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `Result<Option<EncryptedData>, MmError<WalletsDBError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>>`
    = note: the full type name has been written to '/Users/borngraced/Work/komodefi/target/wasm32-unknown-unknown/debug/deps/mm2_main-755d4d43ce22a145.long-type-7075314664593906737.txt'

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_wallet::mnemonics_wasm_db::WalletsDBError>`
   --> mm2src/mm2_main/src/lp_wallet/mnemonics_wasm_db.rs:126:45
    |
126 |     let transaction = db.transaction().await?;
    |                                             ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_wallet::mnemonics_wasm_db::WalletsDBError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `Result<Option<EncryptedData>, MmError<WalletsDBError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`
    = note: the full type name has been written to '/Users/borngraced/Work/komodefi/target/wasm32-unknown-unknown/debug/deps/mm2_main-755d4d43ce22a145.long-type-7075314664593906737.txt'

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_wallet::mnemonics_wasm_db::WalletsDBError>`
   --> mm2src/mm2_main/src/lp_wallet/mnemonics_wasm_db.rs:127:60
    |
127 |     let table = transaction.table::<MnemonicsTable>().await?;
    |                                                            ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_wallet::mnemonics_wasm_db::WalletsDBError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `Result<Option<EncryptedData>, MmError<WalletsDBError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`
    = note: the full type name has been written to '/Users/borngraced/Work/komodefi/target/wasm32-unknown-unknown/debug/deps/mm2_main-755d4d43ce22a145.long-type-7075314664593906737.txt'

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_wallet::mnemonics_wasm_db::WalletsDBError>`
   --> mm2src/mm2_main/src/lp_wallet/mnemonics_wasm_db.rs:139:15
    |
139 |         .await?
    |               ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_wallet::mnemonics_wasm_db::WalletsDBError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `Result<Option<EncryptedData>, MmError<WalletsDBError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`
    = note: the full type name has been written to '/Users/borngraced/Work/komodefi/target/wasm32-unknown-unknown/debug/deps/mm2_main-755d4d43ce22a145.long-type-7075314664593906737.txt'

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_wallet::mnemonics_wasm_db::WalletsDBError>`
   --> mm2src/mm2_main/src/lp_wallet/mnemonics_wasm_db.rs:102:44
    |
102 |     let db = wallets_ctx.wallets_db().await?;
    |                                            ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_wallet::mnemonics_wasm_db::WalletsDBError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_wallet::mnemonics_wasm_db::WalletsDBError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_wallet::mnemonics_wasm_db::WalletsDBError>`
   --> mm2src/mm2_main/src/lp_wallet/mnemonics_wasm_db.rs:103:45
    |
103 |     let transaction = db.transaction().await?;
    |                                             ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_wallet::mnemonics_wasm_db::WalletsDBError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_wallet::mnemonics_wasm_db::WalletsDBError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_wallet::mnemonics_wasm_db::WalletsDBError>`
   --> mm2src/mm2_main/src/lp_wallet/mnemonics_wasm_db.rs:104:60
    |
104 |     let table = transaction.table::<MnemonicsTable>().await?;
    |                                                            ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_wallet::mnemonics_wasm_db::WalletsDBError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_wallet::mnemonics_wasm_db::WalletsDBError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_wallet::mnemonics_wasm_db::WalletsDBError>`
   --> mm2src/mm2_main/src/lp_wallet/mnemonics_wasm_db.rs:117:15
    |
117 |         .await?;
    |               ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_wallet::mnemonics_wasm_db::WalletsDBError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_wallet::mnemonics_wasm_db::WalletsDBError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
   --> mm2src/mm2_main/src/lp_swap/swap_v2_common.rs:220:39
    |
220 |     let db = swaps_ctx.swap_db().await?;
    |                                       ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
   --> mm2src/mm2_main/src/lp_swap/swap_v2_common.rs:221:45
    |
221 |     let transaction = db.transaction().await?;
    |                                             ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
   --> mm2src/mm2_main/src/lp_swap/swap_v2_common.rs:222:65
    |
222 |     let table = transaction.table::<MySwapsFiltersTable>().await?;
    |                                                                 ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
   --> mm2src/mm2_main/src/lp_swap/swap_v2_common.rs:223:74
    |
223 |     let mut item = match table.get_item_by_unique_index("uuid", id).await? {
    |                                                                          ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
   --> mm2src/mm2_main/src/lp_swap/swap_v2_common.rs:228:64
    |
228 |     table.replace_item_by_unique_index("uuid", id, &item).await?;
    |                                                                ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_native_dex::init_metamask::InitMetamaskError>`
   --> mm2src/mm2_main/src/lp_init/init_metamask.rs:142:109
    |
142 |     let task_id = RpcTaskManager::spawn_rpc_task(&init_ctx.init_metamask_manager, &spawner, task, client_id)?;
    |                                                                                                             ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<rpc_task::RpcTaskError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_native_dex::init_metamask::InitMetamaskError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `Result<InitRpcTaskResponse, MmError<InitMetamaskError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<rpc_task::RpcTaskError>>>`
    = note: the full type name has been written to '/Users/borngraced/Work/komodefi/target/wasm32-unknown-unknown/debug/deps/mm2_main-755d4d43ce22a145.long-type-12770668214775882348.txt'

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<rpc_task::rpc_common::CancelRpcTaskError>`
   --> mm2src/mm2_main/src/lp_init/init_metamask.rs:169:42
    |
169 |     task_manager.cancel_task(req.task_id)?;
    |                                          ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<rpc_task::RpcTaskError>>` is not implemented for `mm2_err_handle::mm_error::MmError<rpc_task::rpc_common::CancelRpcTaskError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<common::SuccessResponse, mm2_err_handle::mm_error::MmError<rpc_task::rpc_common::CancelRpcTaskError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<rpc_task::RpcTaskError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_rpcs::SwapV2DbError>`
  --> mm2src/mm2_main/src/lp_swap/swap_v2_rpcs.rs:83:39
   |
83 |     let db = swaps_ctx.swap_db().await?;
   |                                       ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_rpcs::SwapV2DbError>`
   |
   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
   = help: the following other types implement trait `std::convert::From<T>`:
             <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
             <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
   = note: required for `std::result::Result<std::option::Option<u8>, mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_rpcs::SwapV2DbError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_rpcs::SwapV2DbError>`
  --> mm2src/mm2_main/src/lp_swap/swap_v2_rpcs.rs:84:45
   |
84 |     let transaction = db.transaction().await?;
   |                                             ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_rpcs::SwapV2DbError>`
   |
   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
   = help: the following other types implement trait `std::convert::From<T>`:
             <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
             <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
   = note: required for `std::result::Result<std::option::Option<u8>, mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_rpcs::SwapV2DbError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_rpcs::SwapV2DbError>`
  --> mm2src/mm2_main/src/lp_swap/swap_v2_rpcs.rs:85:65
   |
85 |     let table = transaction.table::<MySwapsFiltersTable>().await?;
   |                                                                 ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_rpcs::SwapV2DbError>`
   |
   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
   = help: the following other types implement trait `std::convert::From<T>`:
             <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
             <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
   = note: required for `std::result::Result<std::option::Option<u8>, mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_rpcs::SwapV2DbError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_rpcs::SwapV2DbError>`
  --> mm2src/mm2_main/src/lp_swap/swap_v2_rpcs.rs:86:72
   |
86 |     let item = match table.get_item_by_unique_index("uuid", uuid).await? {
   |                                                                        ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_rpcs::SwapV2DbError>`
   |
   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
   = help: the following other types implement trait `std::convert::From<T>`:
             <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
             <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
   = note: required for `std::result::Result<std::option::Option<u8>, mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_rpcs::SwapV2DbError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_rpcs::SwapV2DbError>`
   --> mm2src/mm2_main/src/lp_swap/swap_v2_rpcs.rs:192:39
    |
192 |     let db = swaps_ctx.swap_db().await?;
    |                                       ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_rpcs::SwapV2DbError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `Result<Option<MySwapForRpc<MakerSwapEvent>>, MmError<SwapV2DbError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>>`
    = note: the full type name has been written to '/Users/borngraced/Work/komodefi/target/wasm32-unknown-unknown/debug/deps/mm2_main-755d4d43ce22a145.long-type-9468050619375602557.txt'

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_rpcs::SwapV2DbError>`
   --> mm2src/mm2_main/src/lp_swap/swap_v2_rpcs.rs:193:45
    |
193 |     let transaction = db.transaction().await?;
    |                                             ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_rpcs::SwapV2DbError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `Result<Option<MySwapForRpc<MakerSwapEvent>>, MmError<SwapV2DbError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`
    = note: the full type name has been written to '/Users/borngraced/Work/komodefi/target/wasm32-unknown-unknown/debug/deps/mm2_main-755d4d43ce22a145.long-type-9468050619375602557.txt'

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_rpcs::SwapV2DbError>`
   --> mm2src/mm2_main/src/lp_swap/swap_v2_rpcs.rs:194:60
    |
194 |     let table = transaction.table::<SavedSwapTable>().await?;
    |                                                            ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_rpcs::SwapV2DbError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `Result<Option<MySwapForRpc<MakerSwapEvent>>, MmError<SwapV2DbError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`
    = note: the full type name has been written to '/Users/borngraced/Work/komodefi/target/wasm32-unknown-unknown/debug/deps/mm2_main-755d4d43ce22a145.long-type-9468050619375602557.txt'

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_rpcs::SwapV2DbError>`
   --> mm2src/mm2_main/src/lp_swap/swap_v2_rpcs.rs:195:72
    |
195 |     let item = match table.get_item_by_unique_index("uuid", uuid).await? {
    |                                                                        ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_rpcs::SwapV2DbError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `Result<Option<MySwapForRpc<MakerSwapEvent>>, MmError<SwapV2DbError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`
    = note: the full type name has been written to '/Users/borngraced/Work/komodefi/target/wasm32-unknown-unknown/debug/deps/mm2_main-755d4d43ce22a145.long-type-9468050619375602557.txt'

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_rpcs::SwapV2DbError>`
   --> mm2src/mm2_main/src/lp_swap/swap_v2_rpcs.rs:200:73
    |
200 |     let filters_table = transaction.table::<MySwapsFiltersTable>().await?;
    |                                                                         ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_rpcs::SwapV2DbError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `Result<Option<MySwapForRpc<MakerSwapEvent>>, MmError<SwapV2DbError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`
    = note: the full type name has been written to '/Users/borngraced/Work/komodefi/target/wasm32-unknown-unknown/debug/deps/mm2_main-755d4d43ce22a145.long-type-9468050619375602557.txt'

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_rpcs::SwapV2DbError>`
   --> mm2src/mm2_main/src/lp_swap/swap_v2_rpcs.rs:201:87
    |
201 |     let filter_item = match filters_table.get_item_by_unique_index("uuid", uuid).await? {
    |                                                                                       ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_rpcs::SwapV2DbError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `Result<Option<MySwapForRpc<MakerSwapEvent>>, MmError<SwapV2DbError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`
    = note: the full type name has been written to '/Users/borngraced/Work/komodefi/target/wasm32-unknown-unknown/debug/deps/mm2_main-755d4d43ce22a145.long-type-9468050619375602557.txt'

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_rpcs::SwapV2DbError>`
   --> mm2src/mm2_main/src/lp_swap/swap_v2_rpcs.rs:233:39
    |
233 |     let db = swaps_ctx.swap_db().await?;
    |                                       ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_rpcs::SwapV2DbError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `Result<Option<MySwapForRpc<TakerSwapEvent>>, MmError<SwapV2DbError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>>`
    = note: the full type name has been written to '/Users/borngraced/Work/komodefi/target/wasm32-unknown-unknown/debug/deps/mm2_main-755d4d43ce22a145.long-type-6748048221667501919.txt'

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_rpcs::SwapV2DbError>`
   --> mm2src/mm2_main/src/lp_swap/swap_v2_rpcs.rs:234:45
    |
234 |     let transaction = db.transaction().await?;
    |                                             ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_rpcs::SwapV2DbError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `Result<Option<MySwapForRpc<TakerSwapEvent>>, MmError<SwapV2DbError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`
    = note: the full type name has been written to '/Users/borngraced/Work/komodefi/target/wasm32-unknown-unknown/debug/deps/mm2_main-755d4d43ce22a145.long-type-6748048221667501919.txt'

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_rpcs::SwapV2DbError>`
   --> mm2src/mm2_main/src/lp_swap/swap_v2_rpcs.rs:235:60
    |
235 |     let table = transaction.table::<SavedSwapTable>().await?;
    |                                                            ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_rpcs::SwapV2DbError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `Result<Option<MySwapForRpc<TakerSwapEvent>>, MmError<SwapV2DbError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`
    = note: the full type name has been written to '/Users/borngraced/Work/komodefi/target/wasm32-unknown-unknown/debug/deps/mm2_main-755d4d43ce22a145.long-type-6748048221667501919.txt'

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_rpcs::SwapV2DbError>`
   --> mm2src/mm2_main/src/lp_swap/swap_v2_rpcs.rs:236:72
    |
236 |     let item = match table.get_item_by_unique_index("uuid", uuid).await? {
    |                                                                        ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_rpcs::SwapV2DbError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `Result<Option<MySwapForRpc<TakerSwapEvent>>, MmError<SwapV2DbError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`
    = note: the full type name has been written to '/Users/borngraced/Work/komodefi/target/wasm32-unknown-unknown/debug/deps/mm2_main-755d4d43ce22a145.long-type-6748048221667501919.txt'

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_rpcs::SwapV2DbError>`
   --> mm2src/mm2_main/src/lp_swap/swap_v2_rpcs.rs:241:73
    |
241 |     let filters_table = transaction.table::<MySwapsFiltersTable>().await?;
    |                                                                         ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_rpcs::SwapV2DbError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `Result<Option<MySwapForRpc<TakerSwapEvent>>, MmError<SwapV2DbError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`
    = note: the full type name has been written to '/Users/borngraced/Work/komodefi/target/wasm32-unknown-unknown/debug/deps/mm2_main-755d4d43ce22a145.long-type-6748048221667501919.txt'

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_rpcs::SwapV2DbError>`
   --> mm2src/mm2_main/src/lp_swap/swap_v2_rpcs.rs:242:87
    |
242 |     let filter_item = match filters_table.get_item_by_unique_index("uuid", uuid).await? {
    |                                                                                       ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_rpcs::SwapV2DbError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `Result<Option<MySwapForRpc<TakerSwapEvent>>, MmError<SwapV2DbError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`
    = note: the full type name has been written to '/Users/borngraced/Work/komodefi/target/wasm32-unknown-unknown/debug/deps/mm2_main-755d4d43ce22a145.long-type-6748048221667501919.txt'

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>`
   --> mm2src/mm2_main/src/lp_swap/saved_swap.rs:285:19
    |
285 |             .await?
    |                   ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::cursor_prelude::CursorError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<u32, mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::cursor_prelude::CursorError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>`
   --> mm2src/mm2_main/src/lp_swap/saved_swap.rs:287:19
    |
287 |             .await?;
    |                   ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::cursor_prelude::CursorError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<u32, mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::cursor_prelude::CursorError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>`
   --> mm2src/mm2_main/src/lp_swap/saved_swap.rs:294:43
    |
294 |         let db = swaps_ctx.swap_db().await?;
    |                                           ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>`
   --> mm2src/mm2_main/src/lp_swap/saved_swap.rs:295:49
    |
295 |         let transaction = db.transaction().await?;
    |                                                 ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>`
   --> mm2src/mm2_main/src/lp_swap/saved_swap.rs:296:79
    |
296 |         let migration_table = transaction.table::<SwapsMigrationTable>().await?;
    |                                                                               ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>`
   --> mm2src/mm2_main/src/lp_swap/saved_swap.rs:303:89
    |
303 |                     let filters_table = transaction.table::<MySwapsFiltersTable>().await?;
    |                                                                                         ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>`
   --> mm2src/mm2_main/src/lp_swap/saved_swap.rs:304:82
    |
304 |                     let swaps_table = transaction.table::<SavedSwapTable>().await?;
    |                                                                                  ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>`
   --> mm2src/mm2_main/src/lp_swap/saved_swap.rs:305:66
    |
305 |                     let swaps = swaps_table.get_all_items().await?;
    |                                                                  ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>`
   --> mm2src/mm2_main/src/lp_swap/saved_swap.rs:316:100
    |
316 | ...                   match filters_table.get_item_by_unique_index("uuid", swap.uuid()).await? {
    |                                                                                              ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>`
   --> mm2src/mm2_main/src/lp_swap/saved_swap.rs:325:84
    |
325 |                         filters_table.replace_item(filter_id, &filter_record).await?;
    |                                                                                    ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>`
   --> mm2src/mm2_main/src/lp_swap/saved_swap.rs:337:79
    |
337 |             migration_table.add_item(&SwapsMigrationTable { migration }).await?;
    |                                                                               ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_lock::SwapLockError>`
   --> mm2src/mm2_main/src/lp_swap/swap_lock.rs:184:47
    |
184 |             let db = swaps_ctx.swap_db().await?;
    |                                               ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_lock::SwapLockError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_swap::swap_lock::SwapLockError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_lock::SwapLockError>`
   --> mm2src/mm2_main/src/lp_swap/swap_lock.rs:185:53
    |
185 |             let transaction = db.transaction().await?;
    |                                                     ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_lock::SwapLockError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_swap::swap_lock::SwapLockError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_lock::SwapLockError>`
   --> mm2src/mm2_main/src/lp_swap/swap_lock.rs:186:67
    |
186 |             let table = transaction.table::<SwapLockTable>().await?;
    |                                                                   ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_lock::SwapLockError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_swap::swap_lock::SwapLockError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_lock::SwapLockError>`
   --> mm2src/mm2_main/src/lp_swap/swap_lock.rs:187:47
    |
187 |             table.delete_item(record_id).await?;
    |                                               ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_lock::SwapLockError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_swap::swap_lock::SwapLockError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
   --> mm2src/mm2_main/src/lp_swap/swap_v2_common.rs:110:39
    |
110 |     let db = swaps_ctx.swap_db().await?;
    |                                       ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<bool, mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
   --> mm2src/mm2_main/src/lp_swap/swap_v2_common.rs:111:45
    |
111 |     let transaction = db.transaction().await?;
    |                                             ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<bool, mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
   --> mm2src/mm2_main/src/lp_swap/swap_v2_common.rs:112:65
    |
112 |     let table = transaction.table::<MySwapsFiltersTable>().await?;
    |                                                                 ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<bool, mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
   --> mm2src/mm2_main/src/lp_swap/swap_v2_common.rs:113:70
    |
113 |     let maybe_item = table.get_item_by_unique_index("uuid", id).await?;
    |                                                                      ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<bool, mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
   --> mm2src/mm2_main/src/lp_swap/swap_v2_common.rs:146:39
    |
146 |     let db = swaps_ctx.swap_db().await?;
    |                                       ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
   --> mm2src/mm2_main/src/lp_swap/swap_v2_common.rs:147:45
    |
147 |     let transaction = db.transaction().await?;
    |                                             ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
   --> mm2src/mm2_main/src/lp_swap/swap_v2_common.rs:148:60
    |
148 |     let table = transaction.table::<SavedSwapTable>().await?;
    |                                                            ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
   --> mm2src/mm2_main/src/lp_swap/swap_v2_common.rs:150:81
    |
150 |     let saved_swap_json = match table.get_item_by_unique_index("uuid", id).await? {
    |                                                                                 ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
   --> mm2src/mm2_main/src/lp_swap/swap_v2_common.rs:162:68
    |
162 |     table.replace_item_by_unique_index("uuid", id, &new_item).await?;
    |                                                                    ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
   --> mm2src/mm2_main/src/lp_swap/swap_v2_common.rs:169:39
    |
169 |     let db = swaps_ctx.swap_db().await?;
    |                                       ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<T, mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
   --> mm2src/mm2_main/src/lp_swap/swap_v2_common.rs:170:45
    |
170 |     let transaction = db.transaction().await?;
    |                                             ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<T, mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
   --> mm2src/mm2_main/src/lp_swap/swap_v2_common.rs:172:60
    |
172 |     let table = transaction.table::<SavedSwapTable>().await?;
    |                                                            ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<T, mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
   --> mm2src/mm2_main/src/lp_swap/swap_v2_common.rs:173:81
    |
173 |     let saved_swap_json = match table.get_item_by_unique_index("uuid", id).await? {
    |                                                                                 ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<T, mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
   --> mm2src/mm2_main/src/lp_swap/swap_v2_common.rs:200:43
    |
200 |         .with_value(BoolAsInt::new(false))?
    |                                           ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<std::vec::Vec<uuid::Uuid>, mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
   --> mm2src/mm2_main/src/lp_swap/swap_v2_common.rs:201:31
    |
201 |         .with_value(swap_type)?;
    |                               ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<std::vec::Vec<uuid::Uuid>, mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
   --> mm2src/mm2_main/src/lp_swap/swap_v2_common.rs:204:39
    |
204 |     let db = swaps_ctx.swap_db().await?;
    |                                       ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<std::vec::Vec<uuid::Uuid>, mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
   --> mm2src/mm2_main/src/lp_swap/swap_v2_common.rs:205:45
    |
205 |     let transaction = db.transaction().await?;
    |                                             ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<std::vec::Vec<uuid::Uuid>, mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
   --> mm2src/mm2_main/src/lp_swap/swap_v2_common.rs:206:65
    |
206 |     let table = transaction.table::<MySwapsFiltersTable>().await?;
    |                                                                 ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<std::vec::Vec<uuid::Uuid>, mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
   --> mm2src/mm2_main/src/lp_swap/swap_v2_common.rs:207:66
    |
207 |     let table_items = table.get_items_by_multi_index(index).await?;
    |                                                                  ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<std::vec::Vec<uuid::Uuid>, mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_wallet::mnemonics_wasm_db::WalletsDBError>`
   --> mm2src/mm2_main/src/lp_wallet/mnemonics_wasm_db.rs:154:44
    |
154 |     let db = wallets_ctx.wallets_db().await?;
    |                                            ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_wallet::mnemonics_wasm_db::WalletsDBError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<_, mm2_err_handle::mm_error::MmError<lp_wallet::mnemonics_wasm_db::WalletsDBError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_wallet::mnemonics_wasm_db::WalletsDBError>`
   --> mm2src/mm2_main/src/lp_wallet/mnemonics_wasm_db.rs:155:45
    |
155 |     let transaction = db.transaction().await?;
    |                                             ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_wallet::mnemonics_wasm_db::WalletsDBError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<_, mm2_err_handle::mm_error::MmError<lp_wallet::mnemonics_wasm_db::WalletsDBError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_wallet::mnemonics_wasm_db::WalletsDBError>`
   --> mm2src/mm2_main/src/lp_wallet/mnemonics_wasm_db.rs:156:60
    |
156 |     let table = transaction.table::<MnemonicsTable>().await?;
    |                                                            ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_wallet::mnemonics_wasm_db::WalletsDBError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<_, mm2_err_handle::mm_error::MmError<lp_wallet::mnemonics_wasm_db::WalletsDBError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_wallet::mnemonics_wasm_db::WalletsDBError>`
   --> mm2src/mm2_main/src/lp_wallet/mnemonics_wasm_db.rs:158:48
    |
158 |     let all_items = table.get_all_items().await?;
    |                                                ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_wallet::mnemonics_wasm_db::WalletsDBError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<_, mm2_err_handle::mm_error::MmError<lp_wallet::mnemonics_wasm_db::WalletsDBError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_native_dex::init_metamask::InitMetamaskError>`
   --> mm2src/mm2_main/src/lp_init/init_metamask.rs:125:56
    |
125 |         let crypto_ctx = CryptoCtx::from_ctx(&self.ctx)?;
    |                                                        ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<crypto::CryptoCtxError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_native_dex::init_metamask::InitMetamaskError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `Result<InitMetamaskResponse, MmError<InitMetamaskError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<crypto::CryptoCtxError>>>`
    = note: the full type name has been written to '/Users/borngraced/Work/komodefi/target/wasm32-unknown-unknown/debug/deps/mm2_main-755d4d43ce22a145.long-type-7817180783745311537.txt'

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_native_dex::init_metamask::InitMetamaskError>`
   --> mm2src/mm2_main/src/lp_init/init_metamask.rs:127:84
    |
127 |         let metamask = crypto_ctx.init_metamask_ctx(self.req.project.clone()).await?;
    |                                                                                    ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<crypto::MetamaskCtxInitError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_native_dex::init_metamask::InitMetamaskError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `Result<InitMetamaskResponse, MmError<InitMetamaskError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<crypto::MetamaskCtxInitError>>>`
    = note: the full type name has been written to '/Users/borngraced/Work/komodefi/target/wasm32-unknown-unknown/debug/deps/mm2_main-755d4d43ce22a145.long-type-7817180783745311537.txt'

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:407:52
    |
407 |             let db = self.ctx.ordermatch_db().await?;
    |                                                    ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `Result<Vec<MakerOrder>, MmError<MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>>`
    = note: the full type name has been written to '/Users/borngraced/Work/komodefi/target/wasm32-unknown-unknown/debug/deps/mm2_main-755d4d43ce22a145.long-type-11714836439251202389.txt'

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:408:53
    |
408 |             let transaction = db.transaction().await?;
    |                                                     ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `Result<Vec<MakerOrder>, MmError<MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`
    = note: the full type name has been written to '/Users/borngraced/Work/komodefi/target/wasm32-unknown-unknown/debug/deps/mm2_main-755d4d43ce22a145.long-type-11714836439251202389.txt'

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:409:78
    |
409 |             let table = transaction.table::<MyActiveMakerOrdersTable>().await?;
    |                                                                              ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `Result<Vec<MakerOrder>, MmError<MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`
    = note: the full type name has been written to '/Users/borngraced/Work/komodefi/target/wasm32-unknown-unknown/debug/deps/mm2_main-755d4d43ce22a145.long-type-11714836439251202389.txt'

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:410:59
    |
410 |             let maker_orders = table.get_all_items().await?;
    |                                                           ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `Result<Vec<MakerOrder>, MmError<MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`
    = note: the full type name has been written to '/Users/borngraced/Work/komodefi/target/wasm32-unknown-unknown/debug/deps/mm2_main-755d4d43ce22a145.long-type-11714836439251202389.txt'

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:418:52
    |
418 |             let db = self.ctx.ordermatch_db().await?;
    |                                                    ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<lp_ordermatch::MakerOrder, mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:419:53
    |
419 |             let transaction = db.transaction().await?;
    |                                                     ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<lp_ordermatch::MakerOrder, mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:420:78
    |
420 |             let table = transaction.table::<MyActiveMakerOrdersTable>().await?;
    |                                                                              ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<lp_ordermatch::MakerOrder, mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:424:23
    |
424 |                 .await?
    |                       ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<lp_ordermatch::MakerOrder, mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:430:52
    |
430 |             let db = self.ctx.ordermatch_db().await?;
    |                                                    ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `Result<Vec<TakerOrder>, MmError<MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>>`
    = note: the full type name has been written to '/Users/borngraced/Work/komodefi/target/wasm32-unknown-unknown/debug/deps/mm2_main-755d4d43ce22a145.long-type-9035075274246365160.txt'

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:431:53
    |
431 |             let transaction = db.transaction().await?;
    |                                                     ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `Result<Vec<TakerOrder>, MmError<MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`
    = note: the full type name has been written to '/Users/borngraced/Work/komodefi/target/wasm32-unknown-unknown/debug/deps/mm2_main-755d4d43ce22a145.long-type-9035075274246365160.txt'

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:432:78
    |
432 |             let table = transaction.table::<MyActiveTakerOrdersTable>().await?;
    |                                                                              ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `Result<Vec<TakerOrder>, MmError<MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`
    = note: the full type name has been written to '/Users/borngraced/Work/komodefi/target/wasm32-unknown-unknown/debug/deps/mm2_main-755d4d43ce22a145.long-type-9035075274246365160.txt'

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:433:59
    |
433 |             let maker_orders = table.get_all_items().await?;
    |                                                           ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `Result<Vec<TakerOrder>, MmError<MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`
    = note: the full type name has been written to '/Users/borngraced/Work/komodefi/target/wasm32-unknown-unknown/debug/deps/mm2_main-755d4d43ce22a145.long-type-9035075274246365160.txt'

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:441:52
    |
441 |             let db = self.ctx.ordermatch_db().await?;
    |                                                    ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:442:53
    |
442 |             let transaction = db.transaction().await?;
    |                                                     ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:443:78
    |
443 |             let table = transaction.table::<MyActiveMakerOrdersTable>().await?;
    |                                                                              ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:449:40
    |
449 |             table.add_item(&item).await?;
    |                                        ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:454:52
    |
454 |             let db = self.ctx.ordermatch_db().await?;
    |                                                    ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:455:53
    |
455 |             let transaction = db.transaction().await?;
    |                                                     ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:456:78
    |
456 |             let table = transaction.table::<MyActiveTakerOrdersTable>().await?;
    |                                                                              ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:462:40
    |
462 |             table.add_item(&item).await?;
    |                                        ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:467:52
    |
467 |             let db = self.ctx.ordermatch_db().await?;
    |                                                    ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:468:53
    |
468 |             let transaction = db.transaction().await?;
    |                                                     ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:469:78
    |
469 |             let table = transaction.table::<MyActiveMakerOrdersTable>().await?;
    |                                                                              ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:470:66
    |
470 |             table.delete_item_by_unique_index("uuid", uuid).await?;
    |                                                                  ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:475:52
    |
475 |             let db = self.ctx.ordermatch_db().await?;
    |                                                    ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:476:53
    |
476 |             let transaction = db.transaction().await?;
    |                                                     ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:477:78
    |
477 |             let table = transaction.table::<MyActiveTakerOrdersTable>().await?;
    |                                                                              ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:478:66
    |
478 |             table.delete_item_by_unique_index("uuid", uuid).await?;
    |                                                                  ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:483:52
    |
483 |             let db = self.ctx.ordermatch_db().await?;
    |                                                    ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:484:53
    |
484 |             let transaction = db.transaction().await?;
    |                                                     ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:485:78
    |
485 |             let table = transaction.table::<MyActiveMakerOrdersTable>().await?;
    |                                                                              ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:491:80
    |
491 |             table.replace_item_by_unique_index("uuid", order.uuid, &item).await?;
    |                                                                                ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:496:52
    |
496 |             let db = self.ctx.ordermatch_db().await?;
    |                                                    ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:497:53
    |
497 |             let transaction = db.transaction().await?;
    |                                                     ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:498:78
    |
498 |             let table = transaction.table::<MyActiveTakerOrdersTable>().await?;
    |                                                                              ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:506:23
    |
506 |                 .await?;
    |                       ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:514:52
    |
514 |             let db = self.ctx.ordermatch_db().await?;
    |                                                    ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:515:53
    |
515 |             let transaction = db.transaction().await?;
    |                                                     ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:516:74
    |
516 |             let table = transaction.table::<MyHistoryOrdersTable>().await?;
    |                                                                          ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:522:40
    |
522 |             table.add_item(&item).await?;
    |                                        ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:527:52
    |
527 |             let db = self.ctx.ordermatch_db().await?;
    |                                                    ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<lp_ordermatch::Order, mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:528:53
    |
528 |             let transaction = db.transaction().await?;
    |                                                     ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<lp_ordermatch::Order, mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:529:74
    |
529 |             let table = transaction.table::<MyHistoryOrdersTable>().await?;
    |                                                                          ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<lp_ordermatch::Order, mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:533:23
    |
533 |                 .await?
    |                       ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<lp_ordermatch::Order, mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:553:52
    |
553 |             let db = self.ctx.ordermatch_db().await?;
    |                                                    ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<std::string::String, mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:554:53
    |
554 |             let transaction = db.transaction().await?;
    |                                                     ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<std::string::String, mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:555:83
    |
555 |             let table = transaction.table::<MyFilteringHistoryOrdersTable>().await?;
    |                                                                                   ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<std::string::String, mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:559:23
    |
559 |                 .await?
    |                       ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<std::string::String, mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:567:52
    |
567 |             let db = self.ctx.ordermatch_db().await?;
    |                                                    ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:568:53
    |
568 |             let transaction = db.transaction().await?;
    |                                                     ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:569:83
    |
569 |             let table = transaction.table::<MyFilteringHistoryOrdersTable>().await?;
    |                                                                                   ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:570:40
    |
570 |             table.add_item(&item).await?;
    |                                        ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:577:52
    |
577 |             let db = self.ctx.ordermatch_db().await?;
    |                                                    ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:578:53
    |
578 |             let transaction = db.transaction().await?;
    |                                                     ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:579:83
    |
579 |             let table = transaction.table::<MyFilteringHistoryOrdersTable>().await?;
    |                                                                                   ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:580:40
    |
580 |             table.add_item(&item).await?;
    |                                        ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:585:52
    |
585 |             let db = self.ctx.ordermatch_db().await?;
    |                                                    ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:586:53
    |
586 |             let transaction = db.transaction().await?;
    |                                                     ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:587:83
    |
587 |             let table = transaction.table::<MyFilteringHistoryOrdersTable>().await?;
    |                                                                                   ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:591:23
    |
591 |                 .await?
    |                       ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:595:53
    |
595 |             table.replace_item(item_id, &item).await?;
    |                                                     ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:600:52
    |
600 |             let db = self.ctx.ordermatch_db().await?;
    |                                                    ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:601:53
    |
601 |             let transaction = db.transaction().await?;
    |                                                     ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:602:83
    |
602 |             let table = transaction.table::<MyFilteringHistoryOrdersTable>().await?;
    |                                                                                   ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:606:23
    |
606 |                 .await?
    |                       ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:610:53
    |
610 |             table.replace_item(item_id, &item).await?;
    |                                                     ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:615:52
    |
615 |             let db = self.ctx.ordermatch_db().await?;
    |                                                    ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:616:53
    |
616 |             let transaction = db.transaction().await?;
    |                                                     ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:617:83
    |
617 |             let table = transaction.table::<MyFilteringHistoryOrdersTable>().await?;
    |                                                                                   ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:621:23
    |
621 |                 .await?
    |                       ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
   --> mm2src/mm2_main/src/lp_ordermatch/my_orders_storage.rs:625:53
    |
625 |             table.replace_item(item_id, &item).await?;
    |                                                     ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_ordermatch::my_orders_storage::MyOrdersError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
   --> mm2src/mm2_main/src/lp_swap/maker_swap_v2.rs:197:43
    |
197 |         let db = swaps_ctx.swap_db().await?;
    |                                           ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
   --> mm2src/mm2_main/src/lp_swap/maker_swap_v2.rs:198:49
    |
198 |         let transaction = db.transaction().await?;
    |                                                 ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
   --> mm2src/mm2_main/src/lp_swap/maker_swap_v2.rs:200:77
    |
200 |         let filters_table = transaction.table::<MySwapsFiltersTable>().await?;
    |                                                                             ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
   --> mm2src/mm2_main/src/lp_swap/maker_swap_v2.rs:210:44
    |
210 |         filters_table.add_item(&item).await?;
    |                                            ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
   --> mm2src/mm2_main/src/lp_swap/maker_swap_v2.rs:212:64
    |
212 |         let table = transaction.table::<SavedSwapTable>().await?;
    |                                                                ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
   --> mm2src/mm2_main/src/lp_swap/maker_swap_v2.rs:217:36
    |
217 |         table.add_item(&item).await?;
    |                                    ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>`
   --> mm2src/mm2_main/src/lp_swap/my_swaps_storage.rs:180:46
    |
180 |             let db = swap_ctx.swap_db().await?;
    |                                              ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>`
   --> mm2src/mm2_main/src/lp_swap/my_swaps_storage.rs:181:53
    |
181 |             let transaction = db.transaction().await?;
    |                                                     ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>`
   --> mm2src/mm2_main/src/lp_swap/my_swaps_storage.rs:182:82
    |
182 |             let my_swaps_table = transaction.table::<MySwapsFiltersTable>().await?;
    |                                                                                  ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>`
   --> mm2src/mm2_main/src/lp_swap/my_swaps_storage.rs:192:49
    |
192 |             my_swaps_table.add_item(&item).await?;
    |                                                 ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>`
   --> mm2src/mm2_main/src/lp_swap/my_swaps_storage.rs:202:46
    |
202 |             let db = swap_ctx.swap_db().await?;
    |                                              ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<lp_swap::MyRecentSwapsUuids, mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>`
   --> mm2src/mm2_main/src/lp_swap/my_swaps_storage.rs:203:53
    |
203 |             let transaction = db.transaction().await?;
    |                                                     ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<lp_swap::MyRecentSwapsUuids, mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>`
   --> mm2src/mm2_main/src/lp_swap/my_swaps_storage.rs:204:82
    |
204 |             let my_swaps_table = transaction.table::<MySwapsFiltersTable>().await?;
    |                                                                                  ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<lp_swap::MyRecentSwapsUuids, mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>`
   --> mm2src/mm2_main/src/lp_swap/my_swaps_storage.rs:216:50
    |
216 |                         .only("my_coin", my_coin)?
    |                                                  ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::cursor_prelude::CursorError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<lp_swap::MyRecentSwapsUuids, mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::cursor_prelude::CursorError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>`
   --> mm2src/mm2_main/src/lp_swap/my_swaps_storage.rs:217:56
    |
217 |                         .only("other_coin", other_coin)?
    |                                                        ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::cursor_prelude::CursorError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<lp_swap::MyRecentSwapsUuids, mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::cursor_prelude::CursorError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>`
   --> mm2src/mm2_main/src/lp_swap/my_swaps_storage.rs:220:31
    |
220 |                         .await?
    |                               ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::cursor_prelude::CursorError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<lp_swap::MyRecentSwapsUuids, mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::cursor_prelude::CursorError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>`
   --> mm2src/mm2_main/src/lp_swap/my_swaps_storage.rs:222:31
    |
222 |                         .await?
    |                               ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::cursor_prelude::CursorError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<lp_swap::MyRecentSwapsUuids, mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::cursor_prelude::CursorError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>`
   --> mm2src/mm2_main/src/lp_swap/my_swaps_storage.rs:227:50
    |
227 |                         .only("my_coin", my_coin)?
    |                                                  ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::cursor_prelude::CursorError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<lp_swap::MyRecentSwapsUuids, mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::cursor_prelude::CursorError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>`
   --> mm2src/mm2_main/src/lp_swap/my_swaps_storage.rs:230:31
    |
230 |                         .await?
    |                               ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::cursor_prelude::CursorError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<lp_swap::MyRecentSwapsUuids, mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::cursor_prelude::CursorError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>`
   --> mm2src/mm2_main/src/lp_swap/my_swaps_storage.rs:232:31
    |
232 |                         .await?
    |                               ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::cursor_prelude::CursorError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<lp_swap::MyRecentSwapsUuids, mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::cursor_prelude::CursorError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>`
   --> mm2src/mm2_main/src/lp_swap/my_swaps_storage.rs:237:56
    |
237 |                         .only("other_coin", other_coin)?
    |                                                        ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::cursor_prelude::CursorError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<lp_swap::MyRecentSwapsUuids, mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::cursor_prelude::CursorError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>`
   --> mm2src/mm2_main/src/lp_swap/my_swaps_storage.rs:240:31
    |
240 |                         .await?
    |                               ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::cursor_prelude::CursorError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<lp_swap::MyRecentSwapsUuids, mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::cursor_prelude::CursorError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>`
   --> mm2src/mm2_main/src/lp_swap/my_swaps_storage.rs:242:31
    |
242 |                         .await?
    |                               ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::cursor_prelude::CursorError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<lp_swap::MyRecentSwapsUuids, mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::cursor_prelude::CursorError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>`
   --> mm2src/mm2_main/src/lp_swap/my_swaps_storage.rs:249:31
    |
249 |                         .await?
    |                               ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::cursor_prelude::CursorError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<lp_swap::MyRecentSwapsUuids, mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::cursor_prelude::CursorError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>`
   --> mm2src/mm2_main/src/lp_swap/my_swaps_storage.rs:251:31
    |
251 |                         .await?
    |                               ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::cursor_prelude::CursorError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<lp_swap::MyRecentSwapsUuids, mm2_err_handle::mm_error::MmError<lp_swap::my_swaps_storage::MySwapsError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::cursor_prelude::CursorError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>`
   --> mm2src/mm2_main/src/lp_swap/saved_swap.rs:381:47
    |
381 |             let db = swaps_ctx.swap_db().await?;
    |                                               ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `Result<Option<SavedSwap>, MmError<SavedSwapError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>>`
    = note: the full type name has been written to '/Users/borngraced/Work/komodefi/target/wasm32-unknown-unknown/debug/deps/mm2_main-755d4d43ce22a145.long-type-13642738272023903284.txt'

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>`
   --> mm2src/mm2_main/src/lp_swap/saved_swap.rs:382:53
    |
382 |             let transaction = db.transaction().await?;
    |                                                     ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `Result<Option<SavedSwap>, MmError<SavedSwapError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`
    = note: the full type name has been written to '/Users/borngraced/Work/komodefi/target/wasm32-unknown-unknown/debug/deps/mm2_main-755d4d43ce22a145.long-type-13642738272023903284.txt'

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>`
   --> mm2src/mm2_main/src/lp_swap/saved_swap.rs:383:68
    |
383 |             let table = transaction.table::<SavedSwapTable>().await?;
    |                                                                    ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `Result<Option<SavedSwap>, MmError<SavedSwapError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`
    = note: the full type name has been written to '/Users/borngraced/Work/komodefi/target/wasm32-unknown-unknown/debug/deps/mm2_main-755d4d43ce22a145.long-type-13642738272023903284.txt'

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>`
   --> mm2src/mm2_main/src/lp_swap/saved_swap.rs:385:91
    |
385 |             let saved_swap_json = match table.get_item_by_unique_index("uuid", uuid).await? {
    |                                                                                           ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `Result<Option<SavedSwap>, MmError<SavedSwapError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`
    = note: the full type name has been written to '/Users/borngraced/Work/komodefi/target/wasm32-unknown-unknown/debug/deps/mm2_main-755d4d43ce22a145.long-type-13642738272023903284.txt'

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>`
   --> mm2src/mm2_main/src/lp_swap/saved_swap.rs:395:47
    |
395 |             let db = swaps_ctx.swap_db().await?;
    |                                               ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<std::vec::Vec<lp_swap::saved_swap::SavedSwap>, mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>`
   --> mm2src/mm2_main/src/lp_swap/saved_swap.rs:396:53
    |
396 |             let transaction = db.transaction().await?;
    |                                                     ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<std::vec::Vec<lp_swap::saved_swap::SavedSwap>, mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>`
   --> mm2src/mm2_main/src/lp_swap/saved_swap.rs:397:68
    |
397 |             let table = transaction.table::<SavedSwapTable>().await?;
    |                                                                    ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<std::vec::Vec<lp_swap::saved_swap::SavedSwap>, mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>`
   --> mm2src/mm2_main/src/lp_swap/saved_swap.rs:399:52
    |
399 |             let swaps = table.get_all_items().await?;
    |                                                    ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<std::vec::Vec<lp_swap::saved_swap::SavedSwap>, mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>`
   --> mm2src/mm2_main/src/lp_swap/saved_swap.rs:416:47
    |
416 |             let db = swaps_ctx.swap_db().await?;
    |                                               ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>`
   --> mm2src/mm2_main/src/lp_swap/saved_swap.rs:417:53
    |
417 |             let transaction = db.transaction().await?;
    |                                                     ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>`
   --> mm2src/mm2_main/src/lp_swap/saved_swap.rs:418:68
    |
418 |             let table = transaction.table::<SavedSwapTable>().await?;
    |                                                                    ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>`
   --> mm2src/mm2_main/src/lp_swap/saved_swap.rs:422:23
    |
422 |                 .await?;
    |                       ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_swap::saved_swap::SavedSwapError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_lock::SwapLockError>`
   --> mm2src/mm2_main/src/lp_swap/swap_lock.rs:131:47
    |
131 |             let db = swaps_ctx.swap_db().await?;
    |                                               ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_lock::SwapLockError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `Result<Option<SwapLock>, MmError<SwapLockError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>>`
    = note: the full type name has been written to '/Users/borngraced/Work/komodefi/target/wasm32-unknown-unknown/debug/deps/mm2_main-755d4d43ce22a145.long-type-3214764614864890638.txt'

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_lock::SwapLockError>`
   --> mm2src/mm2_main/src/lp_swap/swap_lock.rs:132:53
    |
132 |             let transaction = db.transaction().await?;
    |                                                     ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_lock::SwapLockError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `Result<Option<SwapLock>, MmError<SwapLockError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`
    = note: the full type name has been written to '/Users/borngraced/Work/komodefi/target/wasm32-unknown-unknown/debug/deps/mm2_main-755d4d43ce22a145.long-type-3214764614864890638.txt'

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_lock::SwapLockError>`
   --> mm2src/mm2_main/src/lp_swap/swap_lock.rs:133:67
    |
133 |             let table = transaction.table::<SwapLockTable>().await?;
    |                                                                   ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_lock::SwapLockError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `Result<Option<SwapLock>, MmError<SwapLockError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`
    = note: the full type name has been written to '/Users/borngraced/Work/komodefi/target/wasm32-unknown-unknown/debug/deps/mm2_main-755d4d43ce22a145.long-type-3214764614864890638.txt'

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_lock::SwapLockError>`
   --> mm2src/mm2_main/src/lp_swap/swap_lock.rs:136:67
    |
136 |                 table.get_item_by_unique_index("uuid", uuid).await?
    |                                                                   ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_lock::SwapLockError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `Result<Option<SwapLock>, MmError<SwapLockError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`
    = note: the full type name has been written to '/Users/borngraced/Work/komodefi/target/wasm32-unknown-unknown/debug/deps/mm2_main-755d4d43ce22a145.long-type-3214764614864890638.txt'

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_lock::SwapLockError>`
   --> mm2src/mm2_main/src/lp_swap/swap_lock.rs:143:49
    |
143 |                 table.delete_item(item_id).await?;
    |                                                 ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_lock::SwapLockError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `Result<Option<SwapLock>, MmError<SwapLockError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`
    = note: the full type name has been written to '/Users/borngraced/Work/komodefi/target/wasm32-unknown-unknown/debug/deps/mm2_main-755d4d43ce22a145.long-type-3214764614864890638.txt'

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_lock::SwapLockError>`
   --> mm2src/mm2_main/src/lp_swap/swap_lock.rs:150:56
    |
150 |             let record_id = table.add_item(&item).await?;
    |                                                        ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_lock::SwapLockError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `Result<Option<SwapLock>, MmError<SwapLockError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`
    = note: the full type name has been written to '/Users/borngraced/Work/komodefi/target/wasm32-unknown-unknown/debug/deps/mm2_main-755d4d43ce22a145.long-type-3214764614864890638.txt'

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_lock::SwapLockError>`
   --> mm2src/mm2_main/src/lp_swap/swap_lock.rs:161:47
    |
161 |             let db = swaps_ctx.swap_db().await?;
    |                                               ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_lock::SwapLockError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_swap::swap_lock::SwapLockError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_lock::SwapLockError>`
   --> mm2src/mm2_main/src/lp_swap/swap_lock.rs:168:53
    |
168 |             let transaction = db.transaction().await?;
    |                                                     ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_lock::SwapLockError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_swap::swap_lock::SwapLockError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_lock::SwapLockError>`
   --> mm2src/mm2_main/src/lp_swap/swap_lock.rs:169:67
    |
169 |             let table = transaction.table::<SwapLockTable>().await?;
    |                                                                   ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_lock::SwapLockError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_swap::swap_lock::SwapLockError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_lock::SwapLockError>`
   --> mm2src/mm2_main/src/lp_swap/swap_lock.rs:171:85
    |
171 |             let replaced_record_id = table.replace_item(self.record_id, &item).await?;
    |                                                                                     ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_lock::SwapLockError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_swap::swap_lock::SwapLockError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
   --> mm2src/mm2_main/src/lp_swap/taker_swap_v2.rs:228:43
    |
228 |         let db = swaps_ctx.swap_db().await?;
    |                                           ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::InitDbError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
   --> mm2src/mm2_main/src/lp_swap/taker_swap_v2.rs:229:49
    |
229 |         let transaction = db.transaction().await?;
    |                                                 ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
   --> mm2src/mm2_main/src/lp_swap/taker_swap_v2.rs:231:77
    |
231 |         let filters_table = transaction.table::<MySwapsFiltersTable>().await?;
    |                                                                             ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
   --> mm2src/mm2_main/src/lp_swap/taker_swap_v2.rs:241:44
    |
241 |         filters_table.add_item(&item).await?;
    |                                            ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
   --> mm2src/mm2_main/src/lp_swap/taker_swap_v2.rs:243:64
    |
243 |         let table = transaction.table::<SavedSwapTable>().await?;
    |                                                                ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

error[E0277]: `?` couldn't convert the error to `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
   --> mm2src/mm2_main/src/lp_swap/taker_swap_v2.rs:248:36
    |
248 |         table.add_item(&item).await?;
    |                                    ^ the trait `std::convert::From<mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>` is not implemented for `mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>`
    |
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<mm2_err_handle::mm_error::MmError<E1>>>
              <mm2_err_handle::mm_error::MmError<E2> as std::convert::From<E1>>
    = note: required for `std::result::Result<(), mm2_err_handle::mm_error::MmError<lp_swap::swap_v2_common::SwapStateMachineError>>` to implement `std::ops::FromResidual<std::result::Result<std::convert::Infallible, mm2_err_handle::mm_error::MmError<mm2_db::indexed_db::DbTransactionError>>>`

For more information about this error, try `rustc --explain E0277`.
error: could not compile `mm2_main` (lib) due to 195 previous errors
